def exc(m,s,e,li=-1):
    m = list(m)
    m[s],m[e] = m[e],m[s]
    if t == 0 and abs(s-e) not in [1,5]:
        r = [e,12,s]
    else:
        r = [e,s] if li == -1 else li
    info = [r,10 if m[s] == 'a' else int(m[s])]
    return [''.join(m),info]
def aro(p):
    li = [7,11,13,17] if t == 0 else []
    li1 = [i for i in li if i != p] if p in li else []
    dxy = [-sx,1,sx,-1]
    li = ([(0,1,2,3,4),(4,9,14,19,24),(20,21,22,23,24),(0,5,10,15,20)] if t == 0 else 
          [(0,1,2,3),(3,7,11,15),(12,13,14,15),(0,4,8,12)])
    return li1+[p + dxy[i] for i in range(4) if p not in li[i]]
def exp(n,m,p=-1,tf=''):
    res = []
    for i in range(size) if n > 0 else [p]:
        if (n > 0 and m[i] != '0') or fx[i]:
            continue
        for j in [j for j in aro(i) if m[j] not in ['x','0x'][n > 0]+tf and not fx[j]]:
            res.append(exc(m,i,j) if n > 0 else [j,j])
    return res
def src(n,m,*a,res1=-1,tf=''):
    global res
    if n == -2:
        s, = a
        li = []
    if n in [-1,-3,-4]:
        s, = a
    if n == 0:
        s,e = a
    if n == 1:
        p,pk = a
    q = [m if n > 0 else s] 
    mkd,step = {q[0]:-1},{q[0]:-1}
    while 1:
        if n == -2 and not q:
            return li
        if n == -1 and (len(q) > 1 or not q):
            break
        cur = q.pop(0)
        if n == -4 and m[cur] == '0':
            break
        if n == -3 and m[cur] != '0':
            break
        if n == 0 and cur == e:
            break
        if n == 1:
            if (pk == -1 and cur == p) or (p != -1 and cur[p] == pk):
                break
        for i,j in exp(n,cur if n > 0 else m,cur,tf):
            if i not in mkd:
                if n == -2:
                    li.append(i)
                q.append(i)
                mkd[i],step[i] = cur,j
    mkd[-2] = cur
    path = [step[cur]]
    while mkd[cur] != -1:
        cur = mkd[cur]
        path.append(step[cur])
    if n > 0:
        res1 = res1 if res1 != -1 else res
        res1 += path[::-1][1:]
        return mkd[-2]
    return path[::-1][1:]
def sort(m,e,pk):
    global res
    if m[e] == pk:
        fx[e]=1
        return m
    def emt(m,p,res1=-1):
        r = src(-4,m,p,tf=pk)
        for i in r[::-1]+[p]:
            m = src(1,m,i,'0',tf=pk,res1=res1)
        return m
    def chk(m,p):
        res1 = []
        m1 = m[:]
        m1 = emt(m1,p,res1=res1)
        m1 = src(1,m1,p,pk,res1=res1)
        ct = len([i for i in [e]+src(-2,m1,e,tf=pk) if m1[i] == '0'])
        return ct,m1,res1
    def move(m,li):
        global res
        li1 = []
        for i in li:
            fx[i]=1
            li1.append((i,src(-2,m,e)))
            fx[i]=0
        li = max(li1,key=lambda i:len(i[1]))
        for i in src(0,m,s,li[0]):
            ct,m1,res1 = chk(m,i)
            res += res1
            m = m1[:]
        return m
    r = src(-1,m,e)
    ctz = m.count('0')-(3 if t == 0 else 0)
    while m[e] != pk:
        s = m.index(pk)
        cs = src(0,m,s,e)[0]
        ct = len([i for i in [e]+src(-2,m,e,tf=pk) if m[i] == '0'])
        if ct < 2 and not (cs == e and m[e] == '0'):
            m = move(m,[i for i,j in exp(0,m,s) if i != e])
            continue
        ct,m1,res1 = chk(m,cs)
        if ct < 2 and not (cs == e and m[e] == '0') and not (cs == e and ct > -1):
            m = move(m,[s]+[i for i,j in exp(0,m,cs) if i != s])
            s = m.index(pk)
            r1 = src(0,m,s,e)[:ctz]
            for i in r1[::-1]:
                m = emt(m,i)
                fx[i]=1
            fxli(r1,0)
            for i in r1:
                m = src(1,m,i,pk)
            continue
        res += res1
        m = m1[:]
    fx[e]=1
    return m
def main(g_t,m,*a):
    global t,sy,sx,size,fx,fxli,res
    t = g_t
    sy,sx = [5,5] if t == 0 else [4,4]
    size = sy * sx
    fx = {i:0 for i in range(size)}
    fxli = lambda li,n: fx.update({i:n for i in li})
    res = []
    if t == 0:
        leaf = '1x0x23000450006700089x0xa'
        fxli([2,12,22],1)
        li = [0,5,20,15,10,4,9,24,19,14]
        for i in li:
            m = sort(m,i,leaf[i])
    if t == 1:
        leaf = '1234567800000000'
        li = [0,1,2,3]+([7,6,5,4] if m[10]=='x' else [4,5,6,7])
        for i in li:
            m = sort(m,i,leaf[i])
    if t == 2:
        m1 = m[:]
        m2,leaf1 = a
        leaf2 = ''.join([leaf1[i] for i in [3,2,1,0,7,6,5,4,11,10,9,8,15,14,13,12]])
        for m,leaf in [[m1,leaf1],[m2,leaf2]]:
            li = [12,13,14,15,8] if m.index('x') in [5,6] else [0,1,2,3,4]
            li1 = []
            for i in li:
                pk = leaf[i]
                if leaf[i] == '0':
                    r = src(-3,''.join(leaf),i)
                    p = r[-1]
                    pk = leaf[p]
                m = sort(m,i,pk)
                if leaf[i] == '0':
                    leaf,info = exc(leaf,i,p,[i]+r)
                    li1.append(info)
            fx={i:0 for i in fx}
            res += li1[::-1]
            res.append([[-1,-1],-1])
    return res

ser=serial_open("COM")
def ts(ad,m=[],y=0,x=0,b=1):
    if b:
        ad += 100 * (1 + T)
    k='00'+['W','R'][bool(y)]+'SB06%DW'
    k=[ord(i) for i in k]
    n=len(m) if not y else y*x
    ad = [0]*(3-len(str(ad))) + list(map(int,str(ad)))
    k+=[ord(str(abs(i))) for i in ad]
    k+=[ord(i) for i in '{:02X}'.format(n)]
    if not y:
        for i in m:
            if i<0:
                i+=2**16
            k+=[ord(j) for j in '{:04X}'.format(i)]
    ser.write([5]+k+[4])
    wait(0.02 if n is 1 else 0.05)
    k=ser.read(ser.inWaiting())
    if y:
        for i in range(0,y*x*4,4):
            v=int(k[10+i:14+i],16)
            if v&(1<<15):
                v-=2**16 
            m.append(v)
        return m if len(m) > 1 else m[0]
def wt(*a,b=1):
    if type(a[0]) == int:
        a=[a]
    for i,j in a:
        ts(i,j if type(j) == list else [j],b=b)
def rd(ad,y=1,x=1):
    return ts(ad,[],y,x)

from time import time       # temp
tl = lambda *n:tp_log(' '.join(map(str,n)))
drl_report_line(0)
set_tool('tool wei')
set_velx(1500); set_accx(2500)
set_velj([100,150,180,225,225,225]); set_accj(400)
begin_blend(10)
ml,mj,aml,amj,mjx = movel,movej,amovel,amovej,movejx
def up(p,mod=0,h=-1):
    p,h = p[:],h if h != -1 else 260
    p[2] = p[2] + h if mod else h
    return p
tool = 0
def cht(t=0.6,n=-1):
    global tool,pos
    if n == tool:
        return
    tool = (1 - tool)
    amj([0,0,0,0,0,-180 if tool else 180],a=1500,mod=1)
    wait(t)
    pos = poss[tool][T]
isgrip = 0
def grip(n):
    global isgrip
    isgrip = n
    if tool:
        if not n:
            wait(0.1)
        wt(40,n,b=0)
        wait(0.2)
    else:
        set_tool_digital_outputs([1,-2] if n else [-1,2])
        wait(0.25)

def ps(pos,y,x,sy=40,sx=40):
    s = y * x
    pos = [pos] * s
    for i in range(1,s):
        pos[i] = trans(pos[i-1],[-sx,0,0,0,0,0]) if i % x else trans(pos[i-x],[0,sy,0,0,0,0])
    return pos
elcA = ps(posx(427.57, 297.78, 226.11, 179.86, -90, -90),5,5)
elcB = ps(posx(157.91, 337.81, 224.38, 0.03, 90, 90),4,4)
elcC = [ps(posx(-44.88, 343.72, 225.76, 179.85, 90.01, 89.96),4,4),ps(posx(-264.78, 344.8, 225.07, 179.83, 90, 90),4,4)]
airA = ps(posx(428.27, 299.52, 135.49+60-1, 179.57, -90, 90),5,5)
airB = ps(posx(158.97, 339.68, 134.48+60-1, 179.84, -90, 90),4,4)
airC = [ps(posx(-44.54, 342.33, 134.92+60, 179.75, 90, -90),4,4),ps(posx(-264.5, 342.62, 134.98+60, 179.83, 90, -90),4,4)]
poss = [[elcA,elcB,elcC],[airA,airB,airC]]

c2=0
def mt1(n,p,pk):
    li = [[1,2,3,4,5,6],[7,8,9,10]] if T == 0 else [[],[5,6,7,8]] if T == 1 else ([[1,2,3],[4]] if c2 else [[1,2,3],[4,5]])
    z = 0 if not tool else 20 if pk in li[0] else 10 if pk in li[1] else 0
    tp = trans((pos[c2] if T == 2 else pos)[p],[0,0,-z,0,0,0])
    mod,h = [0,-1] if n == 1 else [1,3]
    ml(up(tp,mod,h),a=2000)
    if n < 2:
        ml(tp,a=1500 if n else 500,r=5)
        if not n:
            ml([0,0,-0.15,0,0,0],a=300,mod=1)
        grip(n)
        wt(p + (16 if T == 2 and c2 else 0),0 if n else pk)
        mod,h = [1,3] if n else [0,-1]
        ml(up(tp,mod,h),a=500 if n else 2000)

def Run():
    global c2
    for i in range(len(res)):
        li,pk = res[i]
        if pk == -1:
            c2 = 1
            continue
        s,e = li[0],li[-1]
        a = res[i+1][1] if i < len(res)-1 else -1
        b = res[i-1][1] if i else -1
        b1,b2 = pk!=b,pk==a
        cht(n = [pk in [4,5,6,7,8],-1,(int(pk)%2)+c2][T] if b1 else tool)        
        if b1:
            mt1(1,s,pk)
        for i in li[1:-1]:
            mt1(2,i,pk)
        mt1(2 if b2 else 0,e,pk)

def wt_init():
    global T
    for T in range(3):
        li = [[2, 19, 20, 19, 10, 7, 0, 0, 0, 8, 9, 0, 20, 0, 4, 6, 0, 0, 0, 1, 5, 19, 20, 19, 3],
              [0, 0, 0, 0, 0, 5, 0, 8, 0, 7, 9, 1, 6, 3, 4, 2],
              [1, 0, 3, 0, 0, 9, 0, 4, 0, 2, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 4, 2, 9, 5, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 5, 1, 2, 3, 4]][T]
        wt(0,li)
wt_init()       # temp

#wt(30,1,b=False)        # buzz
import time         # temp
time_start = time.time()        # temp

def rd1(ad,y,x):
    di = {10:'a',19:'x',20:'0'} if not T else {9:'x'}
    return ''.join([di[i] if i in di else str(i) for i in rd(ad,y,x)])
root,leaf = [-1]*3,[-1]*3
for T in range(3):
    y,x = [5,5] if not T else [4,4]
    root[T] = rd1(0,y,x)
    if T == 2:
        root[T] = [rd1(0,y,x),rd1(16,y,x)]
        leaf[T] = rd1(32,y,x)

ress = []
for i in range(3):
    if i == 2:
        r1,r2 = root[i]
        ress.append(main(i,r1,r2,leaf[i]))
    else:
        ress.append(main(i,root[i]))
    #tl(i,'done !!!')        # temp

for T in range(3):
    grip(0)
    if T == 0:
        mj([90,0,90,90,-90,0])
        tool = 0
    if T == 2:
        aml([0,0,100,0,0,0],mod=1)
        mj([0,0,0,0,1,0],mod=1)
        mjx(up(poss[tool][2][0][5],0,350),sol=2)
    pos,res = poss[tool][T],ress[T]
    Run()
    
#wt(30,1,b=False)        # buzz
time_end = time.time() - time_start         # temp
minute,second = int(time_end // 60),int(time_end % 60)         # temp
tl('{}m {}s\n'.format(minute,second))         # temp