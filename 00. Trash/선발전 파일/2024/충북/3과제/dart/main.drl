from queue import PriorityQueue
from collections import deque

def exc(m,s,e,r):
    m = list(m)
    m[s],m[e] = m[e],m[s]
    info = [r,int(m[s])]
    return [''.join(m),info]

def aro(pos):
    if pos in cache:
        return cache[pos]
    res = []
    dy,dx = [-1,0,1,0],[0,1,0,-1]
    y,x = divmod(pos,sx)
    for i in range(4):
        ny,nx = y + dy[i],x + dx[i]
        if -1 < ny < sy and -1 < nx < sx:
            res.append(ny * sx + nx)
    cache[pos] = res
    return res

def exp(n,m,p=-1):
    res = []
    di1,di2 = {},{}
    for i in range(si):
        if not fx[i] and m[i] != 'x':
            if m[i] != '0':
                di1[i] = i
            if m[i] == '0' or n < 1:
                di2[i] = i
    if n < 1:
        return [[i,i] for i in aro(p) if i in di2]
    for i in di1 if n > 0 else [p]:
        q = [i]
        r = {i:[di1[i]]}
        for cur in q:
            for j in aro(cur):
                if j in q or j not in di2:
                    continue
                q.append(j)
                r[j] = r[cur] + [di2[j]]
                if j not in hli:
                    res.append(exc(m,di2[j],di1[i],r[j]))
    return res

def src(n,m,*a):
    global res
    if n < 1:
        s,e = a
        if n == 0 and (n,s,e) in cache:
            return cache[n,s,e]
    if n == 1:
        leaf,p,pk = a    
    cur = m if n > 0 else s
    q = PriorityQueue() if n > 0 else deque([])
    mkd = {cur:[cur]}
    g = {cur:0}    
    def heu0(m):
        ct = 0
        if p != -1:
            rp = len([i for i in src(0,m,m.index(pk),p) if m[i] not in '0'+pk])
            ct += 10000 * rp
            r2 = src(-1,m,p,-1)
            isDead = len(r2) > 1
        for i in range(si):
            if m[i] not in '0x':
                y1,x1 = divmod(i,sx)
                y2,x2 = divmod(p if p!=-1 else leaf.index(m[i]),sx)
                dst = (abs(y1 - y2) + abs(x1 - x2)) + 1
                ct += (100 * (si - dst) if isDead and i in r2 else -dst) if p != -1 else dst ** 2
        if p != -1 and not rp:
            ct = -2 ** (30 if m[p] == pk else 20)
        return ct
    put = lambda cur: q.put((g[cur] + heu0(cur), cur)) if n > 0 else q.append(cur)
    get = lambda : q.get()[1] if n > 0 else q.popleft()
    put(cur)
    while 1:
        if n == -1 and len(q) > 1:      # default
            break
        cur = get()
        if n == -2 and m[cur] != '0' and cur not in e:
            break
        if n == 0 and cur == e:
            break
        if n == 1:
            if (p == -1 and cur == leaf) or (p != -1 and cur[p] == pk):
                break
        for i,j in exp(n,cur if n > 0 else m,cur):
            if i not in mkd:
                mkd[i] = mkd[cur] + [j]
                g[i] = g[cur] + 1
                put(i)
    res1 = mkd[cur]
    if n > 0:
        res += res1[1:]
        return cur
    if n == 0:
        cache[n,s,e] = res1
    return res1

def main(g_t,m,*a):
    global t,sy,sx,si,fx,fxli,cache,res
    t = g_t
    sy,sx = [5,5]
    si = sy * sx
    fx = {i:0 for i in range(si)}
    fxli = lambda li,n: fx.update({i:n for i in li})
    cache = {}
    res = []
    if t == 0:
        global hli
        leaf,hli = a
        seq = [i for i in range(si) if len(exp(0,m,i)) == 1]
        li = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]
        if [m[i] for i in li].count('x') == 2:
            li = [20,21,22,23,24,15,16,17,18,19,10,11,12,13,14]
        for i in range(0,16,5):
            fxli(seq,1)
            li1 = li[0+i:5+i]
            seq += sorted(li1,key=lambda i:len(exp(0,m,i)))
        fxli(seq,0)
        seq = [i for i in seq if i not in hli and m[i] != 'x'][:5]
    if t == 2:
        hli = []
        leaf = list(m)
        m = '1234567800000000000000000'
        ct = 1
        for i in range(25):
            pk = leaf[i]
            if pk == 'x':
                leaf[i] = '0'
            elif pk != '0':
                leaf[i] = str(ct)
                ct += 1
        leaf = ''.join(leaf)
        seq = [20,21,22,23,24]
    hd,hdr = [],{}
    leaf1 = list(leaf[:])
    for i in seq:
        pk = leaf1[i]
        if pk == '0':
            r = src(-2,leaf1,i,hd)
            pk = leaf1[r[-1]]
            hd.append(i)
            hdr[i] = r
            leaf1[r[-1]],leaf1[i] = '0',pk
        m = src(1,m,''.join(leaf1),i,pk)
        fx[i] = 1
    m = src(1,m,''.join(leaf1),-1,-1)
    for i in hd[::-1]:
        res.append([hdr[i],int(m[i])])
    return res

def ts(ad,val=[],y=1,x=1):
    ser = serial_open(port='COM')
    plc =  list('00RSB06%DW'+'%03d'%ad)
    plc += [i for i in '{:02X}'.format(y*x)]
    if val != []:
        plc[2] = 'W'
        plc += '%04X'%(val&0xFFFF)
    ser.write([5]+[ord(i) for i in plc]+[4])
    wait(0.05) if val == [] else wait(0.02)
    if val == []:
        plc = ser.read(ser.inWaiting()).decode()
        val = [int(plc[10+i:14+i],16) for i in range(0, y*x*4,4)]
    serial_close(ser)
    return val[0] if type(val) != int and len(val) == 1 else val

tl = lambda *n:tp_log(' '.join(map(str,n)))
drl_report_line(0)
set_tool('tool')
set_velx(1500); set_accx(2500); set_velj([100,150,180,225,225,225]); set_accj(400)
begin_blend(25)
ml,mj,aml,amj,mjx = movel,movej,amovel,amovej,movejx
H = 320
def up(p,mod=0,h=-1):
    p,h = p[:],h if h != -1 else H
    p[2] = p[2] + h if mod else h
    return p
tool = 0
def cht(n=-1,t=0.6):
    global tool
    if n == tool:
        return
    tool = (1 - tool)
    amj([0,0,0,0,0,180 if tool else -180],a=1500,mod=1)
    wait(t)
isgrip = 0
def grip(n):
    global isgrip
    isgrip = n
    if tool:
        if not n:
            wait(0.1)
        ts(40,n)
    else:
        set_tool_digital_outputs([1,-2] if n else [-1,2])
    wait(0.25)
itli = [0,1,2,3,4,5,6,7]
def it(n,t=0.6,mod=0):
    global itli
    if not mod:
        n = 4 - itli.index(n)
    ts(10,n)
    wait(t * abs(n))
    itli = itli[-n:] + itli[:-n]
    return t * abs(n)
def gt(n,t=3):
    global gp
    ts(20,n)
    wait(t)
    
def ps(p,ad,y,x,sy=40,sx=40):
    pos = {}
    for i in range(y * x):
        pos[i] = [trans(p[j],[-sx*(i%x),sy*(i//x),0,0,0,0]) for j in [0,1]] + [ad + i]
    return pos      
A = ps([posx(47.56, 283.33, 226.81, 0.14, 90.02, 90.05),[0]*6],100,5,5)
B = ps([posx(377.54, 283.3, 228.17, 179.7, -90, -90),posx(378.5, 284.09, 135.95+60, 0.01, 90, -90)],200,5,5)
C = ps([posx(-275.13, 282.96, 227.15, 179.85, 90, 90.01),[0]*6],300,5,5)
IT = {0:[-1, posx(417.71, 187.51, 264.84, 179.81, -90, 90),5]}
GT = {0:[posx(137.85, 540.22, 246.92, 0.32, 90, 90),-1,50],
      1:[posx(-166.54, 540.23, 247.66, 0.01, -90, -90),-1,50]}
      
def z(pk):
    pk %= 10
    return -(20 if pk in [7,8] else 10) if tool else 0
    
def mt1(pos,n,p,pk,b=0,add=0):
    tp = trans(pos[p][tool],[0,0,z(pk),0,0,0])
    mh = [[0,-1],[0,-1]] if b else [[1,3],[0,-1]]
    a = [1500 if pos == IT else 3000]*2 if b else [800,2500]
    if n == 1:
        mh,a = mh[::-1],a[::-1]
    ml(up(tp,*mh[0]),a=2500 + add,r=25 if n else 1)
    if n < 2:
        ml(tp,a=a[0],r=5 if n else 1)
        grip(n)
        ts(pos[p][2],0 if n else pk)
        ml(up(tp,*mh[1]),a=a[1])

def Run(pos,res):
    cht(0)
    for i in range(len(res)):
        r,pk = res[i]
        if pos == C:
            pk += 10
        n = len(r)
        li = [r[1]-r[0]]
        ct = 0
        mt1(pos,1,r[0],pk)
        for i in range(1,n):
            if i < n - 1:
                dire = r[i+1] - r[i]
                skip = li[i - 1] == dire
                li.append(dire)
                if skip:
                    ct += 1
                    continue
            mt1(pos,1 if not i else 0 if i == n-1 else 2,r[i],pk,add=1000 * ct)
            ct = 0

def wt_init():
    for ad,val in enumerate([6,4,8,1,5,2,7,3]):
        ts(1+ad,10+val)    
    for i in range(3):
        li = [[3,0,4,0,5,0,10,9,6,0,7,0,8,10,0,0,10,0,9,1,0,2,0,0,0,0,7,0,0,0,0,10,9,8,0,0,5,0,10,6,0,10,4,9,0,3,0,2,0,1],
              [6,0,0,0,5,0,1,0,4,0,0,0,3,0,0,0,0,0,2,0,8,0,0,0,7],
              []][i]
        for ad,val in enumerate(li):
            ts((100*(1+i))+ad,val)
wt_init()       # temp

ts(30,1)        # buzz
import time         # temp
time_start = time.time()        # temp

def rd(t,ad):
    di = {9:'x',10:'0'}
    li = ts(ad,[],5,5)
    if t == 0:
        info[t] = [i for i in range(25) if li[i] == 10]
    return ''.join([di[i] if i in di else str(i) for i in li])
root,leaf,info = [-1]*3,[-1]*3,[-1]*3
root[0] = rd(0,100)
leaf[0] = rd(0,125)
root[1] = rd(1,200)
leaf[2] = leaf[0][:]

ress = [[[[0, 1, 6, 11, 16, 17, 22, 23, 24], 3], [[10, 5, 0], 7], [[2, 1, 6, 11, 16, 15, 20], 4], [[12, 11, 6, 1, 2], 8], [[4, 9, 14, 13, 12, 17, 22, 23], 5], [[8, 3, 4], 6], [[23, 22, 17, 12, 11, 6, 1], 5], [[20, 15, 10, 11, 12, 13, 8, 3], 4], [[24, 23, 22, 17, 16, 15, 20], 3], [[19, 24], 1], [[21, 22], 2], [[3, 8, 13, 12, 17], 4], [[1, 6, 11], 5], [[4, 9, 14], 6], [[2, 3, 8], 8], [[0, 1], 7]],
None,
[[[5, 10, 15, 20], 6], [[6, 11, 16, 21], 
7], [[4, 9, 14, 19, 24, 23, 22], 5], [[7, 8, 13, 18, 23], 8], [[3, 4, 9, 14, 19, 24], 4], [[1, 6, 7, 8], 2], [[2, 7, 12, 11], 3], [[0, 1], 1], [[24, 19, 14], 4], [[23, 24], 8], [[22, 17], 5], [[21, 22], 7]]]
#ress = [-1]*3
#ress[0] = main(0,root[0],leaf[0],info[0]); tl('0 done !!!')
#ress[1] = -1
#ress[2] = main(2,leaf[2]); tl('1 done !!!')

grip(0)
mj([90,0,90,90,-90,0])
idx = ts(1,[],1,8)
it(idx.index(11))
cht(1)
mjx(up(IT[0][tool]),sol=3)
for pk in range(1,9):
    mt1(IT,1,0,pk+10,1)
    aml([0,100,0,0,0,0],mod=1)
    cht(0)
    if pk < 8:
        it(idx.index(pk + 11),0)
    p1 = root[1].index(str(pk))
    mt1(B,1,p1,pk,1)    
    p2 = root[0].index(str(pk))
    mt1(A,0,p2,pk,1)
    ml(up(B[p1][tool]))
    cht(1)
    mt1(B,0,p1,pk+10,1)
H = 270
Run(A,ress[0])

H = 320
gt(1,0)
for pk in range(1,9):
    p1 = root[1].index(str(pk))
    if pk > 1:
        amj([90,0,90,90,-90,0])
        wait(0.5)
    mt1(B,1,p1,pk+10,1)
    mt1(GT,0,0,pk+10,1)
    gt(2)
    mj([0,0,0,0,180,-50],mod=1)
    mt1(GT,1,1,pk+10,1)
    gt(1,0)
    mt1(C,0,pk-1,pk+10,1)
H = 270
Run(C,ress[2])


ts(30,1)        # buzz
time_end = time.time() - time_start         # temp
minute,second = int(time_end // 60),int(time_end % 60)         # temp
tl('{}m {}s\n'.format(minute,second))         # temp