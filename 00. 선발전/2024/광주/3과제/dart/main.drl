
def ts(ad,val=[],y=1,x=1):
    ser = serial_open(port='COM')
    plc =  list('00RSB06%DW'+'%03d'%ad)
    plc += [i for i in '{:02X}'.format(y*x)]
    if val != []:
        plc[2] = 'W'
        plc += '%04X'%(val&0xFFFF)
    ser.write([5]+[ord(i) for i in plc]+[4])
    wait(0.05) if val == [] else wait(0.02)
    if val == []:
        plc = ser.read(ser.inWaiting()).decode()
        val = [int(plc[10+i:14+i],16) for i in range(0, y*x*4,4)]
    serial_close(ser)
    return val[0] if type(val) != int and len(val) == 1 else val

tl = lambda *n:tp_log(' '.join(map(str,n)))
drl_report_line(0)
set_tool('tool')
set_velx(1500); set_accx(2500); set_velj([100,150,180,225,225,225]); set_accj(400)
begin_blend(25)
ml,mj,aml,amj,mjx = movel,movej,amovel,amovej,movejx
H = 270
def up(p,mod=0,h=-1):
    p,h = p[:],h if h != -1 else H
    p[2] = p[2] + h if mod else h
    return p
tool = 0
def cht(n=-1,t=0.6):
    global tool
    if n == tool:
        return
    tool = (1 - tool)
    amj([0,0,0,0,0,180 if tool else -180],a=1500,mod=1)
    wait(t)
isgrip = 0
def grip(n):
    global isgrip
    isgrip = n
    if tool:
        if not n:
            wait(0.1)
        ts(40,n)
        wait(0.2)
    else:
        set_tool_digital_outputs([1,-2] if n else [-1,2])
        wait(0.25)
itli = [0,1,2,3,4,5,6,7]
def it(n,t=0.6,mod=0):
    global itli
    if not mod:
        n = 4 - itli.index(n)
    ts(10,n)
    wait(t * abs(n))
    itli = itli[-n:] + itli[:-n]
    return t * abs(n)    
gp = 4.5
def gt(n,t=3):
    global gp
    if n == gp:
        return -1
    ts(20,n)
    wait(t *  abs(gp - n))
    n1 = 0.1 * abs(gp - n)
    gp = n
    return n1

def ps(p,ad,y,x,sy=40,sx=40):
    pos = {}
    for i in range(y * x):
        pos[i] = [trans(p[j],[-sx*(i%x),sy*(i//x),0,0,0,0]) for j in [0,1]] + [ad + i]
    return pos
# 3D
# def ps(p,ad,y,x,z,sy=40,sx=40,sz=60):
#     pos = {}
#     size = y * x
#     for i in range(size * z):
#         nz = i // size
#         ny = (i % size) // x
#         nx = i % x
#         pos[i] = [trans(p[tool],[-sx*nx,sy*ny,sz*nz,0,0,0]) for tool in [0,1]] + [ad + i]
#     return pos
A = ps([None,None],100,4,4)
B = ps([None,None],200,4,4)
C = ps([None,None],300,4,4)
IT = {0:[None,-1,5]}
GT = {0:[None,-1,50]}

def z(pos,pk):
    li = [[],[]] if pos == A else [[],[]] if pos == B else [[],[]]
    return 0 if not tool else 20 if pk in li[0] else 10 if pk in li[1] else 0 
def mt1(pos,n,p,pk,add=0):
    tp = trans(pos[p][tool],[0,0,-z(pos,pk),0,0,0])
    m,h = [0,-1] if n == 1 else [1,3]
    ml(up(tp,m,h),a = 2500 + add,r = 25 if n else 1)
    if n < 2:
        ml(tp,a=2500 if n else 800,r=[1,5][n])
        grip(n)
        ts(pos[p][2],0 if n else pk)
        m,h = [1,3] if n else [0,-1]
        ml(up(tp,m,h),a=800 if n else 2500)
        
def Run(pos,res):
    for i in range(len(res)):
        r,pk = res[i]
        n = len(r)
        li = [r[1]-r[0]]
        ct = 0
        mt1(pos,1,r[0],pk)
        for i in range(1,n):
            if i < n - 1:
                dire = r[i+1] - r[i]
                skip = li[i - 1] == dire
                li.append(dire)
                if skip:
                    ct += 1
                    continue
            mt1(pos,1 if not i else 0 if i == n-1 else 2,r[i],pk,1000 * ct)
            ct = 0

def wt_init():
    for i in range(3):
        li = [[],
              [],
              []][i]
        for ad,val in enumerate(li):
            ts((100*(1+i))+ad,val)
wt_init()       # temp

ts(30,1)        # buzz
import time         # temp
time_start = time.time()        # temp

def cvt(li):
    di = {9:'x',10:'0',11:'0'}
    return ''.join([di[i] if i in di else str(i) for i in li])
root,leaf,info = [-1]*4,[-1]*4,[-1]*4
for i in range(3):
    y,x = [4,4] if i < 2 else [5,5]
    li = ts([100,200,300][i],[],y,x)
    info[i] = [i for i in range(y*x) if li[i] > 9]
    root[i] = cvt(li)

ress = [None,
        None,
        None]
#ress = [-1]*3
# for i in range(3):
#     ress[i] = main(i,root[i],leaf[i],info[i])
#     tl(i,'done!!!')

grip(0)
mj([90,0,90,90,-90,0])
Run(A,ress[0])
Run(B,ress[1])
Run(C,ress[2])

ts(30,1)        # buzz
time_end = time.time() - time_start         # temp
minute,second = int(time_end // 60),int(time_end % 60)         # temp
tl('{}m {}s\n'.format(minute,second))         # temp