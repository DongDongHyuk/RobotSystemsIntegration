    
def ts(ad,val=[],y=1,x=1):
    ser = serial_open(port='COM')
    plc =  list('00RSB06%DW'+'%03d'%ad)
    plc += [i for i in '{:02X}'.format(y*x)]
    if val != []:
        plc[2] = 'W'
        plc += '%04X'%(val&0xFFFF)
    ser.write([5]+[ord(i) for i in plc]+[4])
    wait(0.05) if val == [] else wait(0.02)
    if val == []:
        plc = ser.read(ser.inWaiting()).decode()
        val = [int(plc[10+i:14+i],16) for i in range(0, y*x*4,4)]
    serial_close(ser)
    return val[0] if type(val) != int and len(val) == 1 else val

tl = lambda *n:tp_log(' '.join(map(str,n)))
drl_report_line(0)
set_tool('tool')
set_velx(1500); set_accx(2500); set_velj([100,150,180,225,225,225]); set_accj(400)
begin_blend(25)
ml,mj,aml,amj,mjx = movel,movej,amovel,amovej,movejx
H = 270
def up(p,mod=0,h=-1):
    p,h = p[:],h if h != -1 else H
    p[2] = p[2] + h if mod else h
    return p
tool = 0
def cht(n=-1,t=0.6):
    global tool
    if n == tool:
        return
    tool = (1 - tool)
    amj([0,0,0,0,0,-180 if tool else 180],a=1500,mod=1)
    wait(t)
isgrip = 0
def grip(n):
    global isgrip
    isgrip = n
    if tool:
        if not n:
            wait(0.1)
        ts(40,n)
        wait(0.2)
    else:
        set_tool_digital_outputs([1,-2] if n else [-1,2])
        wait(0.25)
itli = [0,1,2,3,4,5,6,7]
def it(n,t=0.6,mod=0):
    global itli
    if not mod:
        n = 4 - itli.index(n)
    ts(10,n)
    wait(t * abs(n))
    itli = itli[-n:] + itli[:-n]
    return t * abs(n)
def gt(n,t=3):
    ts(20,n)
    wait(t)

def ps(p,ad,y,x,sy=40,sx=40):
    pos = {}
    for i in range(y * x):
        pos[i] = [trans(p[j],[-sx*(i%x),sy*(i//x),0,0,0,0]) for j in [0,1]] + [ad + i]
    return pos
A = ps([posx(347.63, 303.54, 229.71, 0.03, 90, 90.01),[0]*6],100,4,4)
B = ps([posx(-5.13+40, 332.25, 229.3, 179.45, 90, 90),[0]*6],200,4,5)
C = ps([posx(-225.51, 222.89, 229.02, 179.78, 90.02, 90.03),posx(-226.25, 222.2, 135.29+60, 0.01, -90.01, 90.04)],300,5,5)
IT = {0:[posx(417.24, 186.52, 299.63, 179.16, -90.02, -90.01),[0]*6,5]}
GT = {0:[posx(97.03, 539.85, 248.35, 0.15, 90, 90),[0]*6,99],
      1:[posx(-216.61, 540.51, 249.05, 0.09, -90.01, -89.97),[0]*6,99]}

def z(pos,pk):
    li = [[],[5,6,7,8]]
    return 0 if not tool else 20 if pk in li[0] else 10 if pk in li[1] else 0 
def mt1(pos,n,p,pk,add=0,mh=[],a1=0):
    tp = trans(pos[p][tool],[0,0,-z(pos,pk),0,0,0])
    m,h = [0,400] if pos in [IT,GT] else mh if mh else [0,-1] if n == 1 else [1,3]
    ml(up(tp,m,h),a = 2500 + add,r = 25 if n  else 1)
    if n < 2:
        ml(tp,a=a1 if a1 else 2500 if n else 800,r=[1,5][n])
        grip(n)
        ts(pos[p][2],0 if n else pk)
        m,h = [0,400] if pos in [IT,GT] else mh if mh else [1,3] if n else [0,-1]
        ml(up(tp,m,h),a=a1 if a1 else 800 if n else 2500)
        
def Run(pos,res):
    for i in range(len(res)):
        r,pk = res[i]
        n = len(r)
        li = [r[1]-r[0]]
        ct = 0
        if pos == C:
            cht(pk > 4)
        mt1(pos,1,r[0],pk)
        for i in range(1,n):
            if i < n - 1:
                dire = r[i+1] - r[i]
                skip = li[i - 1] == dire
                li.append(dire)
                if skip:
                    ct += 1
                    continue
            mt1(pos,1 if not i else 0 if i == n-1 else 2,r[i],pk,800 * ct)
            ct = 0

def wt_init():
    for i in range(3):
        li = [[2,2,0,13,3,0,1,0,0,11,0,1,12,0,3,0],
              [0,9,0,0,0,9,5,4,3,0,0,2,6,1,9,0,0,9,9,0],
              [0,2,0,7,0,0,0,0,0,3,0,4,10,0,0,8,0,0,5,0,6,10,0,1,0,0,0,5,2,0,0,4,0,0,8,0,0,10,1,0,7,0,3,0,0,0,10,6,0,0]][i]
        for ad,val in enumerate(li):
            ts((100*(1+i))+ad,val)
    for ad,val in enumerate([5,2,0,4,0,1,6,3]):
        ts(1+ad,val)
wt_init()       # temp

#ts(30,1)        # buzz
import time         # temp
time_start = time.time()        # temp

def cvt(li):
    di = {11:'1',12:'2',13:'3',9:'x',10:'0'}
    return ''.join([di[i] if i in di else str(i) for i in li])
root,leaf,info = [-1]*3,[-1]*3,[-1]*3
for i in range(3):
    y,x = [4,4] if i < 2 else [5,5]
    li = ts([100,200,300][i],[],y,x)
    info[i] = [i for i in range(y*x) if li[i] > 9]
    root[i] = cvt(li)
li = ts(100,[],4,4)
info[0] = [li.index(11),li.index(12),li.index(13)]
root[0] = cvt(li)
li = ts(200,[],4,5)
root[1] = cvt([9 if i in [0,4,15,19] else li[i] for i in range(20)])
li = ts(300,[],5,5)
info[2] = [i for i in range(25) if li[i] == 10]
root[2] = cvt(li)
leaf[2] = cvt(ts(325,[],5,5))

ress = [[[[4, 8], 3], [[14, 13], 3], [[0, 4, 5], 2], [[1, 0, 4], 2], [[6, 2, 1, 0], 1], [[5, 1], 2], [[11, 7, 6, 2], 1], [[2, 6, 7, 11, 15], 1], [[1, 2, 6, 7, 11], 2], [[4, 5, 1], 2]],
        [[[7, 2, 3], 4], [[8, 9], 3], [[6, 7, 8], 5], [[11, 6, 7, 2], 2], [[8, 7, 6, 11, 16], 5], [[3, 8, 7, 6, 11], 4], [[9, 8, 3], 3], [[12, 7, 8, 9], 6], [[11, 10], 4], [[16, 11, 6, 7, 8], 5], [[13, 12, 11, 16], 1], [[8, 13, 12], 5], [[16, 11, 6], 1], [[10, 11], 4], [[9, 8, 13], 6], [[3, 8], 3], [[2, 7], 2]],
        [[[23, 22, 17, 12, 7, 6, 5, 0], 1], [[1, 2, 7, 8, 13, 14, 19, 24], 2], [[11, 6, 1], 4], [[18, 12, 6, 2], 5], [[3, 7, 13, 19, 23], 7], [[24, 19, 14, 13, 8, 3], 2], [[20, 16, 12, 8, 4], 6], [[9, 8, 7, 6, 5], 3], [[23, 17, 11, 7], 7], [[15, 11, 17, 13, 9], 8], [[7, 11, 15], 7], [[5, 6, 7, 12, 17], 3], [[4, 8, 14, 18, 22], 6], [[1, 6], 4], [[0, 5, 10, 11, 12, 13], 1]]] 
#ress = [-1]*3
#ress[0] = main(0,root[0],info[0]); tl(0,'done!!!')
#ress[1] = main(1,root[1]); tl(1,'done!!!')
#ress[2] = main(2,root[2],leaf[2],info[2]); tl(2,'done!!!')

grip(0)
mj([90,0,90,90,-90,0])
Run(A,ress[0])
aml([0,0,100,0,0,0],mod=1)
wait(0.5)
idx = ts(1,[],1,8)
li = ts(206,[],1,3)+ts(211,[],1,3)
gt(1,0)
it(idx.index(li[0]))
for i in range(6):
    pk = li[i]
    if i:
        amj([0,0,0,0,-180,0],mod=1)
        wait(0.5)
    mjx(up(IT[0][0],0,400),sol=3)
    mt1(IT,1,0,pk,a1=2500)
    if i < 5:
        it(idx.index(li[i+1]),0)
    mt1(GT,0,0,pk,a1=2500)
    gt(2)
    amj([0,0,0,0,180,0],mod=1)
    wait(0.5)
    mt1(GT,1,1,pk,a1=2500)
    if i < 5:
        gt(1,0)
    mt1(B,0,[6,7,8,11,12,13][i],pk,mh=[0,400],a1=2500)
Run(B,ress[1])
Run(C,ress[2])

ts(30,1)        # buzz
time_end = time.time() - time_start         # temp
minute,second = int(time_end // 60),int(time_end % 60)         # temp
tl('{}m {}s\n'.format(minute,second))         # temp