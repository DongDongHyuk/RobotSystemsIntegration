pass # Algorithm

ser=serial_open("COM")
def ts(ad,m=[],y=0,x=0,b=1):
    if b:
        ad += 100 * (1 + T)
    k='00'+['W','R'][bool(y)]+'SB06%DW'
    k=[ord(i) for i in k]
    n=len(m) if not y else y*x
    ad = [0]*(3-len(str(ad))) + list(map(int,str(ad)))
    k+=[ord(str(abs(i))) for i in ad]
    k+=[ord(i) for i in '{:02X}'.format(n)]
    if not y:
        for i in m:
            if i<0:
                i+=2**16
            k+=[ord(j) for j in '{:04X}'.format(i)]
    ser.write([5]+k+[4])
    wait(0.02 if n is 1 else 0.05)
    k=ser.read(ser.inWaiting())
    if y:
        for i in range(0,y*x*4,4):
            v=int(k[10+i:14+i],16)
            if v&(1<<15):
                v-=2**16 
            m.append(v)
        return m if len(m) > 1 else m[0]
def wt(*a,b=1):
    if type(a[0]) == int:
        a=[a]
    for i,j in a:
        ts(i,j if type(j) == list else [j],b=b)
def rd(ad,y=1,x=1):
    return ts(ad,[],y,x)

tl = lambda *n:tp_log(' '.join(map(str,n)))
drl_report_line(0)
set_tool('tool wei')
set_velx(1500); set_accx(2500)
set_velj([100,150,180,225,225,225]); set_accj(400)
begin_blend(10)
ml,mj,aml,amj,mjx = movel,movej,amovel,amovej,movejx
def up(p,mod=0,h=-1):
    p,h = p[:],h if h != -1 else 260
    p[2] = p[2] + h if mod else h
    return p
tool = 0
def cht(t=0.6,n=-1):
    global tool,pos
    if n == tool:
        return
    tool = (1 - tool)
    amj([0,0,0,0,0,-180 if tool else 180],a=1500,mod=1)
    wait(t)
    pos = poss[tool][T]
isgrip = 0
def grip(n):
    global isgrip
    isgrip = n
    if tool:
        if not n:
            wait(0.1)
        wt(40,n,b=0)
        wait(0.2)
    else:
        set_tool_digital_outputs([1,-2] if n else [-1,2])
        wait(0.25)
def it(n,t=0.5):
    write(10,n,b=False)
    wt(t * abs(n))
    return 0.5 * abs(n)
gp = 4.5
def gt(n,t=3):
    global gp
    if n == gp:
        return -1
    write(20,n,b=False)
    wt(t *  abs(gp - n))
    n1 = 0.1 * abs(gp - n)
    gp = n
    return n1

def ps(pos,y,x,sy=40,sx=40):
    s = y * x
    pos = [pos] * s
    for i in range(1,s):
        pos[i] = trans(pos[i-1],[-sx,0,0,0,0,0]) if i % x else trans(pos[i-x],[0,sy,0,0,0,0])
    return pos
elcA = ps(pass,5,5)
elcB = ps(pass,4,4)
elcC = ps(pass,4,4)
airA = ps(pass,4,4)
airB = ps(pass,4,4)
airC = ps(pass,4,4)
poss = [[elcA,elcB,elcC],[airA,airB,airC]]

def mt1(n,p,pk):
    li = [[],[]] if T == 0 else [[],[]] if T == 1 else [[],[]]
    z = 0 if not tool else 20 if pk in li[0] else 10 if pk in li[1] else 0
    tp = trans(pos[p],[0,0,-z,0,0,0])
    mod,h = [0,-1] if n == 1 else [1,3]
    ml(up(tp,mod,h),a=2000)
    if n < 2:
        ml(tp,a=1500 if n else 500,r=5)
        if not n:
            ml([0,0,-0.15,0,0,0],a=300,mod=1)
        grip(n)
        wt(p + (16 if T == 2 and c2 else 0),0 if n else pk)
        mod,h = [1,3] if n else [0,-1]
        ml(up(tp,mod,h),a=500 if n else 2000)

def Run():
    global c2
    for i in range(len(res)):
        li,pk = res[i]
        if pk == -1:
            c2 = 1
            continue
        s,e = li[0],li[-1]
        a = res[i+1][1] if i < len(res)-1 else -1
        b = res[i-1][1] if i else -1
        b1,b2 = pk!=b,pk==a       
        if b1:
            mt1(1,s,pk)
        for i in li[1:-1]:
            mt1(2,i,pk)
        mt1(2 if b2 else 0,e,pk)

def wt_init():
    global T
    for T in range(3):
        li = [None,
              None,
              None][T]
        wt(0,li)
wt_init()       # temp

wt(30,1,b=False)        # buzz
import time         # temp
time_start = time.time()        # temp

def rd1(ad,y,x):
    di = {9:'x'}
    return ''.join([di[i] if i in di else str(i) for i in rd(ad,y,x)])
root,leaf = [-1]*3,[-1]*3
for T in range(3):
    y,x = [[0,0],[0,0],[0,0]][T]
    root[T] = rd1(0,y,x)
    leaf[T] = rd1(y*x,y,x)

ress = []
for T in range(3):
    ress.append(main(T,root[T],leaf[T]))
    tl(i,'done !!!')        # temp

for T in range(3):
    grip(0)
    if T == 0:
        mj([90,0,90,90,-90,0])
        tool = 0
    pos,res = poss[tool][T],ress[T]
    Run()
    
wt(30,1,b=False)        # buzz
time_end = time.time() - time_start         # temp
minute,second = int(time_end // 60),int(time_end % 60)         # temp
tl('{}m {}s\n'.format(minute,second))         # temp