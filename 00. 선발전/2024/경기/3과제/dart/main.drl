
def ts(ad,val=[],y=1,x=1):
    ser = serial_open(port='COM')
    plc =  list('00RSB06%DW'+'%03d'%ad)
    plc += [i for i in '{:02X}'.format(y*x)]
    if val != []:
        plc[2] = 'W'
        plc += '%04X'%(val&0xFFFF)
    ser.write([5]+[ord(i) for i in plc]+[4])
    wait(0.05) if val == [] else wait(0.02)
    if val == []:
        plc = ser.read(ser.inWaiting()).decode()
        val = [int(plc[10+i:14+i],16) for i in range(0, y*x*4,4)]
    serial_close(ser)
    return val[0] if type(val) != int and len(val) == 1 else val

tl = lambda *n:tp_log(' '.join(map(str,n)))
drl_report_line(0)
set_tool('tool')
set_velx(1500); set_accx(2500); set_velj([100,150,180,225,225,225]); set_accj(400)
begin_blend(25)
ml,mj,aml,amj,mjx = movel,movej,amovel,amovej,movejx
H = 270
def up(p,mod=0,h=-1):
    p,h = p[:],h if h != -1 else H
    p[2] = p[2] + h if mod else h
    return p
tool = 0
def cht(n=-1,t=0.6):
    global tool
    if n == tool:
        return
    tool = (1 - tool)
    amj([0,0,0,0,0,180 if tool else -180],a=1500,mod=1)
    wait(t)
    mwait(0)        # temp
isgrip = 0
def grip(n):
    global isgrip
    isgrip = n
    if tool:
        if not n:
            wait(0.1)
        ts(40,n)
        wait(0.2)
    else:
        set_tool_digital_outputs([1,-2] if n else [-1,2])
        wait(0.25)
itli = [0,1,2,3,4,5,6,7]
def it(n,t=0.6,mod=0):
    global itli
    if not mod:
        n = 4 - itli.index(n)
    ts(10,n)
    wait(t * abs(n))
    itli = itli[-n:] + itli[:-n]
    return t * abs(n)    
gp = 4.5
def gt(n,t=3):
    global gp
    if n == gp:
        return -1
    ts(20,n)
    wait(t *  abs(gp - n))
    n1 = 0.1 * abs(gp - n)
    gp = n
    return n1
    
def ps(p,ad,y,x,z,sy=40,sx=40,sz=60):
    pos = {}
    size = y * x
    for i in range(size * z):
        nz = i // size
        ny = (i % size) // x
        nx = i % x
        pos[i] = [trans(p[tool],[-sx*nx,sy*ny,sz*nz,0,0,0]) for tool in [0,1]] + [ad + i]
    return pos
A = ps([posx(308+40, 322.2, 227.94, 179.04, -90, -90),[0]*6],100,5,5,1)
B = ps([posx(-285.36+40, 324.66, 227.38, 179.79, 90, 90),posx(-285.55+40, 322.58, 135.34+60, 179.88, 90, -90)],200,4,4,2)
IT = {0:[posx(367.71, 157.43, 297.29, 178.43, -90, -90),posx(367.28, 158.05, 264.85, 179.01, -90, 90),5]}
GT = ps([posx(8.78, 541.06, 218.68, 0.2, 90, 90),posx(9.69, 541.82, 214.37-40, 0.33, 90, -90)],50,1,2,4,sy=0,sx=80,sz=20)

def z(pos,pk):
    li = [[],[]] if pos == A else [[],[]] if pos == B else [[],[]]
    return 0 if not tool else 20 if pk in li[0] else 10 if pk in li[1] else 0 
def mt1(pos,n,p,pk,add=0):
    tp = trans(pos[p][tool],[0,0,-z(pos,pk)-(0.15 if not n and tool else 0),0,0,0])
    m,h = [0,400] if pos == IT else [0,-1] if n == 1 else [1,3]
    ml(up(tp,m,h),a = 2500 + add,r = 25 if n else 1)
    if n < 2:
        ml(tp,a=2500 if n else 500,r=[0,5][n])
        grip(n)
        ts(pos[p][2],0 if n else pk)
        m,h = [0,400] if pos == IT else [1,3] if n else [0,-1]
        ml(up(tp,m,h),a=500 if n else 2500)
        
def Run(pos,res):
    for i in range(len(res)):
        r,pk = res[i]
        n = len(r)
        li = [r[1]-r[0]]
        ct = 0
        mt1(pos,1,r[0],0)
        for i in range(1,n):
            if i < n - 1:
                dire = r[i+1] - r[i]
                skip = li[i - 1] == dire
                li.append(dire)
                if skip:
                    ct += 1
                    continue
            mt1(pos,1 if not i else 0 if i == n-1 else 2,r[i],pk,800 * ct)
            ct = 0

def wt_init():
    for i in range(3):
        li = [[0,3,0,5,0,1,9,0,10,2,0,12,0,0,0,6,0,11,0,7,0,8,0,4,0,0,5,0,6,0,2,1,11,9,7,0,8,0,12,0,3,0,10,0,4,0,0,0,0,0],
              [0,1,0,0,0,5,4,8,3,7,2,6,0,0,0,0,0,2,1,0,3,0,0,8,6,0,0,4,0,7,5,0],
              [0,0,0,0,0,0,0,0]][i]
        for ad,val in enumerate(li):
            ts((100*(1+i))+ad,val)
    #li = [6,4,7,2,8,1,5,3]
    #for ad,val in enumerate(li):
        #ts(1+ad,val)
wt_init()       # temp

#ts(30,1)        # buzz
import time         # temp
time_start = time.time()        # temp

def cvt(t,li):
    di = {10:'a',11:'b',12:'c'}
    li = ['x' if i in [[0,2,4,10,12,14,20,22,24],[0,3,12,15]][t] else li[i] for i in range(len(li))]
    return ''.join([di[i] if i in di else str(i) for i in li])
root,leaf = [-1]*2,[-1]*2
root[0] = cvt(0,ts(100,[],5,5))
leaf[0] = cvt(0,ts(125,[],5,5))
root[1] = cvt(1,ts(200,[],4,4))
leaf[1] = cvt(1,ts(216,[],4,4))
ress = [[[[8, 13, 18], 10], [[6, 7, 8, 13], 9], [[1, 6, 7, 8], 3], [[11, 16], 12], [[8, 7, 6, 11], 3], [[3, 8, 7, 6, 1], 5], [[11, 6, 7], 3], [[16, 11, 6], 12], [[15, 16, 11], 6], [[17, 16, 15], 11], [[18, 17, 16], 10], [[13, 18, 17], 9], [[7, 8, 13, 18], 3], [[6, 7, 8, 13], 12], [[11, 6, 7, 8, 3], 6], [[5, 6, 11], 1], [[9, 8, 7, 6, 5], 2], [[13, 8, 7, 6], 12], [[18, 13, 8, 7], 3], [[19, 18, 13, 8, 9], 7], [[7, 8], 3], [[17, 18, 19], 9], [[16, 17, 18, 13], 10], [[15, 16, 17, 18], 11], [[6, 7], 12], [[11, 6], 1], [[18, 17, 16, 11], 11], [[13, 18], 10], [[8, 13], 3], [[7, 8], 12], [[6, 7], 1], [[11, 6], 11], [[18, 17, 16, 11], 10], [[13, 18, 17, 16, 15], 3], [[19, 18, 17], 9], [[23, 18, 19], 4], [[8, 13, 18, 23], 12], [[7, 8, 13, 18], 1], [[6, 7], 11], [[17, 16], 9], [[18, 17], 1], [[23, 18, 13], 12], [[17, 18, 23], 1], [[16, 17, 18], 9], [[11, 16, 17], 10], [[13, 8], 12], [[18, 13], 9], [[17, 16, 11, 6], 10], [[23, 18, 17, 16, 11], 1], [[21, 16, 17, 18, 23], 8], [[11, 16, 17, 18], 1], [[6, 11, 16, 21], 10], [[18, 17, 16, 11, 6], 1], [[23, 18, 17, 16], 8], [[13, 18, 23], 9], [[8, 13, 18, 17], 12], [[23, 18, 13, 8], 9], [[16, 11], 8], [[17, 18, 13], 12], [[21, 16, 17], 10]],
        [[[9, 13, 14], 7], [[5, 9, 13], 5], [[1, 5, 9], 1], [[6, 5], 4], [[10, 6, 2, 1], 2], [[9, 10, 6, 2], 1], [[8, 4], 3], [[11, 10, 9, 8], 6], [[5, 6, 10, 11], 4], [[13, 9, 10], 5], [[14, 13], 7], [[10, 14], 5]]]
#ress = [-1]*3
# for i in range(3):
#     ress[i] = main(i,root[i],leaf[i],info[i])
#     tl(i,'done!!!')

grip(0)
mj([90,0,90,90,-90,0])

# IT
mjx(up(IT[0][0],0,400),sol=3)
pk = 2
while 1:
    li = ts(1,[],1,8)
    itli = [0,1,2,3,4,5,6,7]
    cht(0)
    if pk == 9:
        it(li.index(1),t=0)
        break
    p1 = (li.index(pk-1) + 1) % 8
    if li[p1] != pk:
        it(p1)        
        pk1 = li[p1]
        mt1(IT,1,0,pk1)        
        p2 = li.index(pk)
        cht(1)
        it(p2)
        mt1(IT,1,0,pk)        
        cht(0)
        mt1(IT,0,0,pk1)        
        cht(1)
        it(p1)        
        mt1(IT,0,0,pk)
    pk += 1

mjx(up(A[0][tool],0,400),sol=3)
Run(A,ress[0])
mj([90,0,90,90,90,0])
tool = 0
cht(1)
Run(B,ress[1])

#ts(30,1)        # buzz
time_end = time.time() - time_start         # temp
minute,second = int(time_end // 60),int(time_end % 60)         # temp
tl('{}m {}s\n'.format(minute,second))         # temp