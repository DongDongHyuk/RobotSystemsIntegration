from queue import *

def exc(m,s,e,r):
    m = list(m)
    m[s],m[e] = m[e],m[s]
    info = [r,int(m[s])]
    return [''.join(m),info]

def aro(pos):
    if pos in cache:
        return cache[pos]
    res = []
    dy,dx = [-1,0,1,0],[0,1,0,-1]
    y,x = divmod(pos,sx)
    for i in range(4):
        ny,nx = y + dy[i],x + dx[i]
        if -1 < ny < sy and -1 < nx < sx:
            res.append(ny * sx + nx)
    cache[pos] = res
    return res

def exp(n,m,p=-1):
    res = []
    for i in range(size) if n > 0 else [p]:
        if fx[i] or m[i] == 'x' or (n > 0 and m[i] == '0'):
            continue
        di = src(-1,m,i,-1) if n > 0 else aro(i)
        for j in di:
            if j == i or fx[j] or m[j] == 'x' or (n == -1 and m[j] != '0'):
                continue
            if t == 0 and n > 0 and j in hli:
                continue
            res.append(exc(m,j,i,di[j]) if n > 0 else [j,j])        
    return res

mkdCt = 0
def src(n,m,*a):
    global res,mkdCt
    if n < 1:
        s,e = a
        if n == 0 and (s,e) in cache:
            return cache[(s,e)]
    if n == 1:
        leaf,p,pk = a
    cur = m if n > 0 else s
    q = PriorityQueue() if n > 0 else []
    mkd = {cur:[cur]}
    g = {cur:0}
    def heu(m):
        ct = 0
        if p != -1:
            s,e = m.index(pk),leaf.index(pk)
            r1 = src(0,m,s,e)
            ct += len(r1)
            ct += 10 * len([i for i in r1 if m[i] not in '0'+pk])
            r2 = src(-2,m,p,-1)
            isDead = len(r2) > 1
        for i in range(size):
            if m[i] not in '0x':
                dst = len(src(0,m,i,leaf.index(m[i]) if p == -1 else p))                
                ct += (dst if p == -1 else (1000 * (size - dst) if isDead and i in r2 else -dst))
        if p != -1 and p in src(-1,m,s,-1):
            ct = -99999 * (2 if m[p] == pk else 1)
        return ct
    put = lambda cur: q.put((g[cur] + heu(cur), cur)) if n > 0 else q.append(cur)
    get = lambda : q.get()[1] if n > 0 else q.pop(0)
    put(cur)
    while 1:
        if n == -2 and len(q) > 1:      # default
            break
        if n in [0,-1] and not q:      # default
            return mkd
        cur = get()
        if n > 0:
            mkdCt += 1
        if n == -3 and m[cur] not in e + ['0']:
            break
        if n == 0 and cur == e:
            break
        if n == 1:
            if (p == -1 and cur == leaf) or (p != -1 and cur[p] == pk):
                break
        for i,j in exp(n,cur if n > 0 else m,cur):
            if i not in mkd:
                mkd[i] = mkd[cur] + [j]
                g[i] = g[cur] + 1
                put(i)
    res1 = mkd[cur]
    if n > 0:
        res += res1[1:]
        return cur
    if n == 0:
        cache[(s,e)] = res1
    return res1

def main(g_t,m,*a):
    global t,sy,sx,size,fx,fxli,cache,res
    t = g_t
    sy,sx = [5,5]
    size = sy * sx
    fx = {i:0 for i in range(size)}
    fxli = lambda li,n: fx.update({i:n for i in li})
    cache = {}
    res = []
    if t == 0:
        global hli
        leaf,hli = a
        li = [[0,5,10,15,20,1,6,11,16,21,],[4,9,14,19,24,3,8,13,18,23]]
        li = min(li,key = lambda li:[m[i] for i in li].count('x'))
        for i,j in [[0,5],[5,10]]:
            li[i:j] = sorted(li[i:j],key = lambda i:len(exp(0,m,i)))
        li = [i for i in li+[2,7,12,17,22] if len(exp(0,m,i)) == 1] + li
    if t == 2:
        hli = []
        leaf = list(m)
        m = '1234567800000000000000000'
        ct = 1
        for i in range(25):
            pk = leaf[i]
            if pk == 'x':
                leaf[i] = '0'
            elif pk != '0':
                leaf[i] = str(ct)
                ct += 1
        leaf = ''.join(leaf)
        li = [20,21,22,23,24]
    hd,hdr = [],{}
    leaf1 = list(leaf[:])
    for i in li:
        if len([i for i in fx if fx[i] if m[i] != '0']) > 5:
            break
        if m[i] == 'x' or i in hli or fx[i]:
            continue
        fxli([i for i in hli if len(exp(0,m,i)) == 1],1)
        pk = leaf1[i]
        if pk == '0':
            r = src(-3,leaf1,i,hd)
            pk = leaf1[r[-1]]
            hd.append(pk)
            hdr[pk] = r
            leaf1[r[-1]],leaf1[i] = '0',pk            
        m = src(1,m,''.join(leaf1),i,pk)
        fx[i] = 1
    m = src(1,m,''.join(leaf1),-1,-1)
    for i in hd[::-1]:
            res.append([hdr[i],int(i)])
    return res

def ts(ad, val=-1):
    ser = serial_open(port = 'COM')
    plc = list('00RSS0106%DW'+'%03d'%ad)
    if val != -1:
        plc[2] = 'W'
        plc += '%04X'%(val&0xFFFF)
    ser.write(bytes([5]+[ord(i) for i in plc]+[4]))
    wait(0.02)
    if val == -1:
        val = int(ser.read(ser.inWaiting()).decode()[10:14], 16)
    serial_close(ser)
    return val
    
def ts(ad,val=[],y=1,x=1):
    ser = serial_open(port='COM')
    plc =  list('00RSB06%DW'+'%03d'%ad)
    plc += [i for i in '{:02X}'.format(y*x)]
    if val != []:
        plc[2] = 'W'
        plc += '%04X'%(val&0xFFFF)
    ser.write([5]+[ord(i) for i in plc]+[4])
    wait(0.05)
    if val == []:
        plc = ser.read(ser.inWaiting()).decode()
        val = [int(plc[10+i:14+i],16) for i in range(0, y*x*4,4)]
    serial_close(ser)
    return val[0] if type(val) != int and len(val) == 1 else val

tl = lambda *n:tp_log(' '.join(map(str,n)))
drl_report_line(0)
set_tool('tool')
set_velx(1500); set_accx(2500); set_velj([100,150,180,225,225,225]); set_accj(400)
begin_blend(25)
ml,mj,aml,amj,mjx = movel,movej,amovel,amovej,movejx
H = 360
def up(p,mod=0,h=-1):
    p,h = p[:],h if h != -1 else H
    p[2] = p[2] + h if mod else h
    return p
tool = 0
def cht(n=-1,t=0.6):
    global tool
    if n == tool:
        return
    tool = (1 - tool)
    mj([0,0,0,0,0,180 if tool else -180],a=1500,r=100,mod=1)
isgrip = 0
def grip(n):
    global isgrip
    isgrip = n
    if tool:
        if not n:
            wait(0.1)
        ts(40,n)
        wait(0.2)
    else:
        set_tool_digital_outputs([1,-2] if n else [-1,2])
        wait(0.25)
itli = [0,1,2,3,4,5,6,7]
def it(n,t=0.6,mod=1):
    global itli
    if not mod:
        n = 4 - itli.index(n)
    ts(10,n)
    wait(t * abs(n))
    itli = itli[-n:] + itli[:-n]
    return t * abs(n)    
gp = 4.5
def gt(n,t=3):
    global gp
    if n == gp:
        return -1
    ts(20,n)
    wait(t *  abs(gp - n))
    n1 = 0.1 * abs(gp - n)
    gp = n
    return n1
def ps(p,ad,y,x,sy=40,sx=40):
    pos = {}
    for i in range(y * x):
        pos[i] = [trans(p[j],[-sx*(i%x),sy*(i//x),0,0,0,0]) for j in [0,1]] + [ad + i]
    return pos
A = ps([posx(49.43, 298.22, 225.85, 179.91, -90, -90),[0]*6],100,5,5)
B = ps([posx(367.7, 278.1, 227.8, 179.83, -90, -90),posx(368.35, 279.47, 135.36+60, 179.94, -90, 90)],200,5,5)
C = ps([posx(-274.55, 285.17, 226.96, 0.06, -90.01, -89.98),[0]*6],300,5,5)
IT = {0:[-1, posx(418.11, 182.68, 264.47, 179.33, -90, 90),5]}
GT = {0:[posx(125.48, 534.7, 246.19, 179.69, -90, -90.01),-1,50],
      1:[posx(-167.7, 541.86, 246.95, 0.02, -90.01, -89.98),-1,50]}

def z(pos,pk):
    pk %= 10
    li = [[],[]] if pos == A else [[7,8],[1,2,3,4,5,6]] if pos == B else [[],[]]
    return 0 if not tool else 20 if pk in li[0] else 10 if pk in li[1] else 0 
def mt1(pos,n,p,pk,add=0):
    tp = trans(pos[p][tool],[0,0,-z(pos,pk)-(0.15 if not n and tool else 0),0,0,0])
    mod,h = [0,260] if n == 1 else [1,3]
    ml(up(tp,1-n,260 if n == 1 else 3),a = 2500 + add)
    if n < 2:
        ml(tp,a=2500 if n else 800,r=3)
        grip(n)
        ts(pos[p][2],pk + (10 if pk and pos == C else 0))
        mod,h = [1,3] if n else [0,-1]
        ml(up(tp,n,3 if n == 1 else 260),a=800 if n else 2500)
def mt2(pos,n,p,pk,b=1):
    tp = trans(pos[p][tool],[0,0,-z(pos,pk),0,0,0])
    if b:
        ml(up(tp))
    ml(tp,a=4000)
    grip(n)
    ts(pos[p][2],pk)
    ml(up(tp))

def i2b():
    idx = ts(1,[],1,8)
    it(idx.index(11),mod=0)
    cht(1)
    mjx(up(IT[0][tool]),sol=3)
    for pk in range(1,9):
        mt2(IT,1,0,0,pk>1)
        if pk < 8:
            it(idx.index(pk + 11),0,0)
        p1 = root[1].index(str(pk))
        ml(up(B[p1][tool]))
        cht(0)
        mt2(B,1,p1,0)
        p2 = root[0].index(str(pk))
        mt2(A,0,p2,pk)
        cht(1)
        mt2(B,0,p1,pk+10)
        
def b2c():
    gt(1,0)
    for pk in range(1,9):
        p1 = root[1].index(str(pk))
        if pk > 1:
            amj([90,0,90,90,-90,0])
            wait(0.5)
        mt2(B,1,p1,0)
        mt2(GT,0,0,pk+10)
        gt(2)
        mj([0,0,0,0,180,-40],mod=1)
        mt2(GT,1,1,0)
        gt(1,0)
        mt2(C,0,pk-1,pk+10)
        
def Run(t):
    cht(0)
    pos,res = [A,B,C][t],ress[t]
    for i in range(len(res)):
        r,pk = res[i]
        n = len(r)
        li = [r[1]-r[0]]
        ct = 0
        mt1(pos,1,r[0],0)
        for i in range(1,n):
            if i < n - 1:
                dire = r[i+1] - r[i]
                skip = li[i - 1] == dire
                li.append(dire)
                if skip:
                    ct += 1
                    continue
            mt1(pos,1 if not i else 0 if i == n-1 else 2,r[i],pk,1000 * ct)
            ct = 0

def wt_init():
    for ad,val in enumerate([6,4,8,1,5,2,7,3]):
        ts(1+ad,10+val)    
    for i in range(3):
        li = [[3,0,4,0,5,0,10,9,6,0,7,0,8,10,0,0,10,0,9,1,0,2,0,0,0,0,7,0,0,0,0,10,9,8,0,0,5,0,10,6,0,10,4,9,0,3,0,2,0,1],
              [6,0,0,0,5,0,1,0,4,0,0,0,3,0,0,0,0,0,2,0,8,0,0,0,7],
              []][i]
        for ad,val in enumerate(li):
            ts((100*(1+i))+ad,val)
wt_init()       # temp

ts(30,1)        # buzz
import time         # temp
time_start = time.time()        # temp

def rd(t,ad):
    di = {9:'x',10:'0'}
    li = ts(ad,[],5,5)
    if t == 0:
        info[t] = [i for i in range(25) if li[i] == 10]
    return ''.join([di[i] if i in di else str(i) for i in li])
root,leaf,info = [-1]*3,[-1]*3,[-1]*3
root[0] = rd(0,100)
leaf[0] = rd(0,125)
root[1] = rd(1,200)
leaf[2] = leaf[0][:]

ress = [
[[[0, 1, 6, 11, 16, 17, 22, 23, 24], 3], [[10, 5, 0], 7], [[24, 23, 22, 17, 16, 15, 20], 3], [[2, 1, 6, 11, 16, 17, 22, 23, 24], 4], [[4, 3, 2, 1, 6, 5], 5], [[24, 23, 22, 17, 16, 11, 10], 4], [[21, 16, 15], 2], [[12, 11, 6, 1], 8], [[8, 9, 14], 6], [[19, 24], 1], [[1, 2, 3, 8], 8], [[15, 16, 17, 22], 2], [[10, 11, 12, 17], 4], [[5, 6, 11], 5], [[0, 1], 7]],
None,
[[[5, 10, 15, 20], 6], [[6, 11, 16, 21], 7], [[4, 9, 14, 19, 24, 23, 22], 5], [[7, 8, 13, 18, 23], 8], [[3, 4, 9, 14, 19, 24], 4], [[1, 6, 7, 8], 2], [[2, 7, 12, 11], 3], [[0, 1], 1], [[24, 19, 14], 4], [[23, 24], 8], [[22, 17], 5], [[21, 22], 7]]]
#ress = [-1]*3
#ress[0] = main(0,root[0],leaf[0],info[0])); tl(0, 'done !!!')
#ress[1] = -1
#ress[2] = main(2,leaf[2])); tl(2, 'done !!!')

grip(0)
mj([90,0,90,90,-90,0])
i2b()
Run(0)
ml([0,0,100,0,0,0],mod=1)
b2c()
Run(2)

ts(30,1)        # buzz
time_end = time.time() - time_start         # temp
minute,second = int(time_end // 60),int(time_end % 60)         # temp
tl('{}m {}s\n'.format(minute,second))         # temp