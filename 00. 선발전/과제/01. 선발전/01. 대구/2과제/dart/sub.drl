def exc(m,s,e,li=-1):
    m = list(m)
    m[s],m[e] = m[e],m[s]
    step = [e,s] if li == -1 else li
    pack = 'abc'.index(m[s])+10 if m[s].isalpha() else int(m[s])
    info = [step,pack]+([ing] if t == 0 else [])
    return [''.join(m),info]
def aro(pos):
    if pos in cache:
        return cache[pos]
    res = []
    dy,dx = [-1,0,1,0],[0,1,0,-1]
    y,x = divmod(pos,sx)
    for i in range(4):
        ny,nx = y + dy[i],x + dx[i]
        if -1 < ny < sy and -1 < nx < sx:
            res.append(ny * sx + nx)
    cache[pos] = res
    return res
def exp(n,m,pos=-1,p=-1):
    res = []
    if t == 0:
        hli1 = hli[ing]
    if t == 1:
        hli1 = hli[:]
    if t == 2:
        hli1 = hli[0]
    for i in range(size) if n > 0 else [pos]:
        if (n > 0 and m[i] != '0') or i in fix:
            continue
        if n > 0 and i in hli1 and (n != 4 or i != pos):
            continue
        for j in aro(i):
            b1 = lambda pos: m[pos] == 'x' or pos in fix
            b2 = lambda pos1,pos2:  n == 4 and pos1 == pos and m[pos2] not in ['0',p]
            if b1(j) or b2(i,j):
                continue
            if n > 0:                
                if j in hli1 and m[j] == '0':
                    que = deque([j])
                    mkd = {j:i,i:-1}
                    while que:
                        cur = que.popleft()
                        for k in aro(cur):
                            if k != i and k not in mkd:                                
                                mkd[k] = cur
                                if k in hli1 and m[k] == '0':
                                    que.append(k)
                                if m[k] == '0' or b1(k) or b2(i,k):
                                    continue
                                res1 = path(mkd,mkd,k)+[k]
                                if t == 1:
                                    if (hli1[1] in res1 and m[k] in '789abc') or \
                                       (hli1[2] in res1 and m[k] in '123456'):
                                        continue
                                # 홀 위에 올릴때 자기를 타고 자기위에 놓음
##                                if n == 4 and i in res1:
##                                    continue
                                res.append(exc(m,i,k,res1[::-1]))                        
                if m[j] == '0':
                    continue                
            if t == 1 and n < 1 and p != -1:
                if (p in '123456' and j == hli1[2]) or \
                   (p in '789abc' and j == hli1[1]):
                    continue
            res.append(exc(m,i,j) if n > 0 else [j,j])
    return res
def bfs(n,m,*a,p=-1):
    global res,fix
    if n < 1:       # 길찾기
        s,e = a
    if n == 1:      # 정렬
        leaf,pos,pack = a
    if n == 2:      # 빈칸 정렬
        li,limit = a
        ct = 0
    if n == 3:      # 특정 위치 정렬
        leaf,li = a
    if n == 4:
        hp, = a
    cur = m if n > 0 else s
    que = deque([cur])
    mkd,step = {cur:-1},{cur:-1}
    while 1:
        if n == -1 and not que:
            return -1
        if n == 2:
            if limit != -1 and (ct > limit or not que):
                return -1
            ct += 1
        cur = que.popleft()
        if n < 1 and cur == e:
            break
        if n == 1:
            if (pos == -1 and cur == leaf) or \
               (pos != -1 and cur[pos] == pack):
                break
        b1 = n == 2 and all([cur[i] == '0' for i in li])
        b2 = n == 3 and all([cur[i] == leaf[i] for i in li])
        b3 = n == 4 and cur[hp] == p
        if b1 or b2 or b3:
            break
        for i,j in exp(n,[m,cur][n > 0],
                       cur if n < 1 else hp if n == 4 else -1,
                       p if p != -1 else -1):
            if i not in mkd:
                que.append(i)
                mkd[i],step[i] = cur,j
    res1 = path(mkd,step,cur)    
    if n > 0 :
        res += res1
        return cur
    return res1
def path(mkd,step,cur):
    path = [step[cur]]
    while mkd[cur] != -1:
        cur = mkd[cur]
        path.append(step[cur])
    return path[::-1][1:]
def sort(m,leaf,e,p = -1):
    global fix,res
    pack = leaf[e] if p == -1 else p
    if t == 1:
        ct = 0
        while 1:
            s = m.index(pack)       # 정렬할 팩 위치
            r = bfs(0,m,s,e,p = pack)       # 정렬 위치까지 경로
            if len([i for i in r if i not in hli]) > 4:      # 빈칸이 5이상 필요한 경우
                pos1 = r[ct]
                m = sort(m,leaf,pos1,pack)
                fix.remove(pos1)
                ct += 1
                continue
            fix.append(s)       # 출발지 고정
            road = []         # 뚫을 경로
            for pos in r[::-1]:               
                pack1 = m[pos]
                if pack1 == '0':        # 원래 치워져 있지롱
                    road.append(pos)
                    continue
                road.append(pos)
                for i in range(2):
                    res1 = bfs(2,m,road if i else ([pos]+road[:-1]),[7000,-1][i])
                    if res1 == -1:
                        fix.remove(s)
                    else:
                        m = res1[:]
                        break
            if s in fix:        # 출발위치를 고정을 안풀고 road를 다 비웠을때 break
                break            
        fix.remove(s)       # 출발지 고정 해제
        m,step = exc(m,e,s,[s]+r)
        res.append(step)        
    else:
        hli1 = hli[ing] if t == 0 else hli if t == 1 else hli[0]
        s = [i for i in range(size) if i not in fix and m[i] == pack][0]
        r = bfs(0,m,s,e)
        if t == 2 and e in hli1:
            r = [i for i in r if i not in hli1 or i == e]
            for i in r:
                m = bfs(4,m,i,p = pack)
        else:
            r = [i for i in r if i not in hli1]
            for i in r:
                m = bfs(1,m,leaf,i,pack)
    fix.append(e)
    return m
def main(g_t,m,*a):    
    global t,sy,sx,size,fix,res,cache
    t = g_t
    sy,sx = [[3,5],[4,5],[3,4]][t]
    size = sy * sx
    fix = []
    res = []
    cache = {}      # cache reset
    if t in [0,1]:
        global hli
    if t == 0:
        global ing
        m1 = m[:]
        m2,hli = a
        m1,m2 = map(list,[m1,m2])       # pack exchanging
        for i in range(15):
            if m1[i] in '456':
                j = [j for j in range(15) if m2[j] in '123'][0]
                m1[i],m2[j] = m2[j],m1[i]
                res.append([i,j,int(m1[i]),int(m2[j])])
        m1,m2 = map(''.join,[m1,m2])
        leaf = []       # making leaf
        for i in range(2):
            m0 = ['0'] * 15
            ct = [-1,0,0,0,0,0,0]
            li = ([j for j in range(15) if leaf[0][j] == '0'] if i else [])+list(range(15)) 
            for j in hli[1-i]+li:
                pack = j // 5 + (3 * i) + 1
                if j not in hli[i] and m0[j] == '0' and ct[pack] < 3:
                    m0[j] = str(pack)
                    ct[pack] += 1
            leaf.append(''.join(m0))
        leaf1,leaf2 = leaf
        for i in range(2):
            ing = i         # now sorting
            m = [m1,m2][i]
            leaf = [leaf1,leaf2][i]            
            for j in [0,1,2,3,4]:
                if j in hli[i] or leaf[j] == '0':
                    m = bfs(1,m,leaf,j,'0')
                    fix.append(j)
                else:
                    m = sort(m,leaf,j)
            m = bfs(1,m,leaf,-1,-1)
            if i:
                m2 = m[:]
            else:
                m1 = m[:]
            fix = []        # fix reset
    if t == 1:
        leaf,hli = a     
        hold = []           # 홀딩 중인 팩
        unhold = []         # 정렬 위치 경로
        def getli(li,n):
            li1 = []
            li2 = [i+n in hli[1:] for i in li]
            if (li2[2] and li2[3]) or \
               (li2.count(1) == 1 and li2[2]):
                li1 = li[::-1]
            elif not (li2.count(1) == 1 and li2[1]):
                for i in li:
                    if i+n in hli[1:]:
                        li1.append(i)
            li1 += [i for i in li if i not in li1]
            return li1        
        li = []         # 정렬 순서
        if all([i in [3,4,8,9,13,14,18,19] for i in hli[1:]]):
            for i in [[4,9,14,19],[3,8,13,18],[2,7,12,17]]:
                li += getli(i,-1)
        else:
            for i in [[0,5,10,15],[1,6,11,16],[2,7,12,17]]:
                li += getli(i,1)
        for pos in li:            
            if pos in hli:      # 정렬 위치가 홀
                continue            
            # 정렬할 팩
            if leaf[pos] == '0' or leaf[pos] in hold:
                li1 = []         # [pack,road]
                for i in range(size):
                    if i not in fix and leaf[i] not in hold+['0']:
                        pack = leaf[i]
                        # 각 팩에서 길찾기를 할때 홀딩중이지 않은 팩을 넘을 수 없음
                        fc = fix[:]
                        li2 = [leaf.index(j) for j in '123456789abc'
                               if j != pack and m.index(j) not in fix]
                        for j in li2:
                            fix.append(j)
                        r = bfs(-1,leaf,pos,i,p = pack)
                        fix = fc[:]
                        if r != -1:
                            r = [pos]+r
                            li1.append([pack,r])
                pack,r = min(li1,key = lambda n: len(n[1]))
                hold.append(pack)
                unhold.append(r)                
            else:
                pack = leaf[pos]                
            if m[pos] == pack:      # 이미 정렬됨 fix, continue
                fix.append(pos)
                continue
            m = sort(m,leaf,pos,pack)
        li = [m[i] for i in range(size) if i not in fix and m[i] != '0']        # 고정 안된 팩
        li = [leaf.index(i) for i in li]        # " 위치
        m = bfs(3,m,leaf,li)        
        for r in unhold[::-1]:
            m,step = exc(m,r[-1],r[0],r)
            if any([m[i] != '0' for i in step[0]][:-1]):
                print('다시 가져오는 길이 막힘\nunhold ->',unhold[::-1],'-',r)
                exit()
            res.append(step)
    if t == 2:
        leaf,hli = a[:]        
        leaf_copy = leaf[:]
        for i in range(3):
            li,root,leaf = hli[0][:],hli[1][:],hli[2][:]
            if root[i] != leaf[i]:
                j = root.index(leaf[i])
                for k in [i,j]:
                    pos,pack = li[k],str(root[k])
                    if m[pos] != pack:
                        m = sort(m,leaf,pos,pack)
                s,e = li[i],li[j]
                m,step = exc(m,s,e)
                step = [e,s,root[i],root[j]]
                res.append(step)
                root[i],root[j] = root[j],root[i]
                hli[1] = root[:]        # root update
                fix_copy = fix[:]
                for k in fix_copy:
                    n = hli[0].index(k)
                    if hli[1][n] == hli[2][n]:
                        fix.remove(k)             
                m = bfs(2,m,[k for k in [e,s] if k not in fix],-1)                
        leaf = leaf_copy
        hold = []
        for i in [0,4,8,1,5,9,2,6,10]:
            if i in hli[0]:
                continue
            di = {}
            if leaf[i] == '0' or leaf[i] in hold:
                y1,x1 = divmod(i,4)
                for j in '123456':
                    if m.index(j) not in fix and j not in hold:
                        y2,x2 = divmod(leaf.index(j),4)
                        di[j] = abs(y1 - y2) + abs(x1 - x2)
                if not di:
                    break
                pack = min(di,key = lambda n:di[n])
                hold.append(pack)
            else:
                pack = leaf[i]
            m = sort(m,leaf,i,pack)
        for i in hold[::-1]:
            s,e = m.index(i),leaf.index(i)
            fix.remove(s)
            m = bfs(1,m,leaf,e,i)
            fix.append(e)
    return res
    
# 1. header
tl = lambda *n:tp_log(' '.join(map(str,n)))
from collections import deque
drl_report_line(OFF)
set_tool('tool wei')
set_velx(1000); set_accx(2000)
set_velj([100,150,180,225,225,225]); set_accj(400)
begin_blend(10)
ml,mj,aml,amj,tr,wt = movel,movej,amovel,amovej,trans,wait
def mjx(pos,sol=-1):
    movejx(pos,sol= sol if sol != -1 else 2)
def rml(x=0,y=0,z=0,a=0,b=0,c=0,t=0.1,vel=None,acc=None):
    aml([x,y,z,a,b,c],mod=1,v=vel,a=acc)
    mwait(0) if t is -1 else wait(t)
def rmj(x=0,y=0,z=0,a=0,b=0,c=0,t=0.1,acc=None):
    amj([x,y,z,a,b,c],mod=1,acc=acc)
    mwait(0) if t is -1 else wait(t)
def up(p,mod=0,h=-1):
    p,h = p[:],h if h != -1 else [260,260,260][T]
    p[2] = p[2] + h if mod else h
    return p
tool = 0
def cht(t=0.6,n = -1):
    global tool,pos
    tool = (1 - tool)
    rmj(c=-180 if tool else 180,t=t,acc=1500)
    pos = poss[tool][T]
isgrip = False
def grip(n):
    global isgrip
    isgrip = n
    if tool:
        if not n:
            wt(0.1)
        write(40,n,b=False)
        wt(0.15)
    else:
        set_tool_digital_outputs([1,-2] if n else [-1,2])
        wt(0.25)

# 2. device communication
ser=serial_open("COM")
def ts(ad,m=[],y=0,x=0,b=True):
    if b:
        ad += 100 * (1 + T)
    k='00'+['W','R'][bool(y)]+'SB06%DW'
    k=[ord(i) for i in k]
    n=len(m) if not y else y*x
    ad = [0]*(3-len(str(ad))) + list(map(int,str(ad)))
    k+=[ord(str(abs(i))) for i in ad]
    k+=[ord(i) for i in '{:02X}'.format(n)]
    if not y:
        for i in m:
            if i<0:
                i+=2**16
            k+=[ord(j) for j in '{:04X}'.format(i)]
    ser.write([5]+k+[4])
    wait(0.02 if n is 1 else 0.05)
    k=ser.read(ser.inWaiting())
    if y:
        for i in range(0,y*x*4,4):
            v=int(k[10+i:14+i],16)
            if v&(1<<15):
                v-=2**16 
            m.append(v)
        return m if len(m) > 1 else m[0]
def write(*a,b = True):
    if isinstance(a[0],int):
        a = [a]
    for i,j in a:
        ts(i,j if isinstance(j,list) else [j],b=b)
def read(ad,y=1,x=1):
    return ts(ad,[],y,x)
    
# - reading init
root = [-1] * 3       # root[0] -> root[0-1]
leaf = [-1] * 3       # leaf[0] -> root[0-2]
info = [-1] * 3
for i in range(3):
    T = i
    y,x = [3,4,3][i],[5,5,4][i]
    for j in range(2):
        m = read(y * x * j,y,x)[:]
        if j:
            leaf[i] = m[:]
        else:
            root[i] = m[:]
            
# - converting init
def con(m):
    m = [('abc'[m[i]-10] if T == 1 and m[i] < 20 else '0') 
        if m[i] >= 10 else str(m[i]) for i in range(len(m))]
    return ''.join(m)
for i in range(3):
    T = i
    m1 = root[i]
    m2 = leaf[i]
    if i == 0:
        info[i] = [[j for j in range(15) if m[j] == 10] for m in [m1,m2]]
    if i == 1:
        li = [-1]*3
        for j in range(20):
            n = m1[j]
            if n > 20:
                li[n - 21] = j
        info[i] = li[:]
    if i == 2:
        info[i] = []
        li = [j for j in range(12) if m1[j] > 10]
        info[i].append(li)
        for m in [m1,m2]:
            info[i].append([m[j]-10 for j in li])
    root[i] = con(m1)
    leaf[i] = con(m2)

# - get positions
def ps(pos,y,x,sy=50,sx=40):
    s = y * x
    pos = [pos] * s
    for i in range(1,s):
        if i % x:
            pos[i] = trans(pos[i-1],[-sx,0,0,0,0,0])
        else:
            pos[i] = trans(pos[i-x],[0,sy,0,0,0,0])
    return pos
elcA = [ps(None,3,5),
        ps(None,3,5)]
elcB = None
elcC = ps(None,3,4,50,50)
airA = [ps(None,3,5),
        ps(None,3,5)]
airB = None
airC = None
poss = [[elcA,elcB,elcC],[airA,airB,airC]]

# - motions
def mt1(p,g,d=[],mod=0,h=-1,z=0,a1=3000,a2=1000,b1=True,b2=False):
    tp = tr((pos[ing] if T == 0 else pos)[p],[0,0,-([0,0.3][not g and not tool]+z),0,0,0])
    ml(up(tp,mod,h),a=a1)
    if b2:
        return -1
    ml(tp,a=a2,r = 5)
    grip(g)    
    if d:
        ad,val = d
        if T == 0:
            ad += (15 * ing)
        write(ad,val)
    if b1:
        ml(up(tp),a=a1)

# 3. Main
def Run():
    def getz(pack):
        if not tool:
            return 0
        li1 = [1,2,7,8] if T == 1 else [1,4]
        li2 = [3,4,9,10] if T == 1 else [2,5]
        return 20 if pack in li1 else 10 if pack in li2 else 0 
    if T == 0:
        global ing
        ing = 0             # not sorting A1 or A2
    if T == 1:
        rml(z=100)
        mjx(up(pos[19],h=360),sol=3)
    if T == 2:
        rmj(90)
    for i in range(len(res)):
        r = res[i]
        if T != 1 and len(r) == 4:       # A exchanging
            for j in range(4):
                n = j % 2
                if T == 0:
                    ing = n
                s,pack = r[n],0 if j < 2 else r[j]
                z = getz(r[2 if j in [1,2] else 3])
                mt1(s,1 if j < 2 else 0,[s,pack],h=300,z=z,a1=2000,a2=1500,b1=0)
                wait(0.1)
                ml(up(pos[n][s] if T == 0 else pos[s],h=300))
                if not n:
                    cht()
            continue
        b3 = len(r[0]) > 2
        if b3:  
            r1 = r[0]
            s,e = r1[0],r1[-1]
            road = r1[1:-1]
        else:
            s,e = r[0]
        pack = r[1]
        af = [res[i+1][0][0],res[i+1][1]] if i < len(res)-1 and isinstance(res[i+1][0],list) else -1
        bf = [res[i-1][0][-1],res[i-1][1]] if i and isinstance(res[i-1][0],list) else -1
        b1,b2 = [e,pack] == af,[s,pack] == bf
        b4 = T == 2 and s in info[2][0]         # hole changing 
        if T == 0:
            ing = r[-1]
        if not b2:
            z = getz(pack)
            mt1(s,1,[s,[0,pack+10][b4]],z=z,b1=False)
            rml(z=3,acc=500)
        if b3:      # ride hole
            for i in road:
                mt1(i,0,[],1,3,z,1500,b2=True)
        mt1(e,0,[e,pack],1,3,z,[None,1500][b1],a2=500,b2=b1)

write(30,1,b=False)
import time         # temp
time_start = time.time()        # temp

# - Calcurating
ress = []
for i in range(3):
    ress.append(main(i,root[i],leaf[i],info[i]))
    tl(i,'done !!!')        # temp
        
for i in range(3):
    grip(0)
    T,pos,res = i,poss[tool][i],ress[i]
    Run()
    
write(30,1,b=False)
time_end = time.time() - time_start         # temp
minute,second = int(time_end // 60),int(time_end % 60)         # temp
tl('{}m {}s\n'.format(minute,second))         # temp