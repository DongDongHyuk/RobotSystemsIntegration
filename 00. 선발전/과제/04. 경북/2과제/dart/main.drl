def ts(ad,val=[],y=1,x=1):
    ser = serial_open(port='COM')
    plc =  list('00RSB06%DW'+'%03d'%ad)
    plc += [i for i in '{:02X}'.format(y*x)]
    if val != []:
        plc[2] = 'W'
        plc += '%04X'%(val&0xFFFF)
    ser.write([5]+[ord(i) for i in plc]+[4])
    wait(0.05) if val == [] else wait(0.02)
    if val == []:
        plc = ser.read(ser.inWaiting()).decode()
        val = [int(plc[10+i:14+i],16) for i in range(0, y*x*4,4)]
    serial_close(ser)
    return val[0] if type(val) != int and len(val) == 1 else val

tl = lambda *n:tp_log(' '.join(map(str,n)))
drl_report_line(0)
set_tool('tool')
set_velx(1500); set_accx(2500); set_velj([100,150,180,225,225,225]); set_accj(400)
begin_blend(25)
ml,mj,aml,amj,mjx = movel,movej,amovel,amovej,movejx
H = 270
def up(p,mod=0,h=-1):
    p,h = p[:],h if h != -1 else H
    p[2] = p[2] + h if mod else h
    return p
tool = 0
def cht(n=-1,t=0.6):
    global tool
    if n == tool:
        return
    tool = (1 - tool)
    amj([0,0,0,0,0,180 if tool else -180],a=1500,mod=1)
    wait(t)
isgrip = 0
def grip(n):
    global isgrip
    isgrip = n
    if tool:
        if not n:
            wait(0.1)
        ts(40,n)
        wait(0.2)
    else:
        set_tool_digital_outputs([1,-2] if n else [-1,2])
        wait(0.25)

def ps(p,ad,y,x,z=1,j5=-1):
    pos = {}
    size = y * x
    for i in range(size * z):
        ny,nx,nz = 40*((i//x)%size),40*(i%x),60*(i//size)
        pos[i] = [trans(p[tool],[ny*(-1 if tool else 1)*(1 if j5==-1 else -1),
                                 nz*(-1 if tool else 1), nx*(-1 if j5==-1 else 1),
                                 0,0,0],DR_TOOL) for tool in [0,1]] + [ad + i]
    return pos
A = ps([posx(403.11, 290.02, 229.86, 170.39, -90, -90),posx(403.9, 291.44, 136.84+60, 170.39, -90, 90)],100,6,1,2,j5=-1)
B = ps([posx(225.95, 434.71, 228.62, 171.1, -90, -89.98),posx(226.78, 435.76, 135.8+60, 171.12, -90.01, 89.97)],200,3,3,j5=-1)
C = ps([posx(-304.54, 352.54, 228.55, 164.49, 89.98, 89.96),posx(-305.14, 351.96, 135.35+60, 164.6, 90.03, -89.97)],300,3,5,j5=1)
D1 = ps([posx(42.41, 421.09, 228.35, 136.36, 90, 90),posx(41.29, 420.7, 135.14+60, 136.59, 90.01, -89.97)],400,3,3,j5=1)
D2 = ps([posx(-107.63, 421.74, 228.01, 136.64, 90.04, 90.04),posx(-108.66, 420.91, 135+60, 136.47, 90, -90)],409,3,3,j5=1)
red = posx(-32.78, 401.64, 136.5+60, 135.99, 90, -90)
blue = posx(-32.07, 551.15, 136.8+60, 136.26, 90, -90)
A = {i:[A[j][0],A[j][1],A[i][2]] for i,j in zip(range(12),[5,4,3,2,1,0,11,10,9,8,7,6])}

C[3][1] = trans(C[3][1],[0,0,0.5,0,0,0])
C[4][1] = trans(C[4][1],[0,0,0.5,0,0,0])
C[11][1] = trans(C[11][1],[0,0,0.5,0,0,0])
C[13][1] = trans(C[13][1],[0,0,1,0,0,0])
C[14][1] = trans(C[14][1],[0,0,1,0,0,0])

def z(pos,p,pk):
    zs = 0
    li = [[1,2,7,8],[3,4,9,10]] if pos==A else [[1,4],[2,5]] if pos==B else [[1,4],[2,5]] if pos==C else [[1,2,7,8],[3,4,9,10]]    
    zs += 0 if not tool else 20 if pk in li[0] else 10 if pk in li[1] else 0
    if pos == A and p > 5:
        pk = ts(100+(p-6))
        zs += 20 if pk in li[0] else 10 if pk in li[1] else 0
    return zs        
def mt1(pos,n,p,pk,add=0,mh=[],a1=0,d2=0):
    if len(pos) == 2:
        pos = [D1,D2][d2]
    tp = trans((pos)[p][tool],[0,0,-z(pos,p,pk),0,0,0])
    m,h = mh if mh else [0,-1] if n == 1 else [1,3]
    ml(up(tp,m,h),a = 1500 + add,r = 25 if n else 0)
    if n < 2:
        ml(tp,a=a1 if a1 else 1000 if n else 300,r=[0,5][n])
        grip(n)
        ts(pos[p][2],0 if n else ([0,12,18,24,24][[A,B,C,D1,D2].index(pos)]+pk)) 
        m,h = mh if mh else [1,3] if n else [0,-1]
        ml(up(tp,m,h),a=a1 if a1 else 300 if n else 1000)      

def Run(pos,res):
    for li in res:
        isD = pos == [D1,D2]
        if isD:
            d2,r,pk = li
            cht(0)
            if d2 == -1:
                cht(1)
                mt1(D1,1,5,pk)
                ml(up(trans(blue,[0,0,-z(-1,-1,pk),0,0,0]),1,3))
                mt1(D2,0,7,pk)
                continue
            if d2 == -2:
                cht(1)
                mt1(D2,1,3,pk)
                ml(up(trans(red,[0,0,-z(-1,-1,pk),0,0,0]),1,3))
                mt1(D1,0,1,pk)
                continue
        else:
            r,pk = li
        n = len(r)
        li = [r[1]-r[0]]
        ct = 0
        if pos == C:
            cht(pk > 3)
        mt1(pos,1,r[0],pk,d2=d2 if isD else 0)
        for i in range(1,n):
            if i < n - 1:
                dire = r[i+1] - r[i]
                skip = li[i - 1] == dire
                li.append(dire)
                if skip:
                    ct += 1
                    continue
            mt1(pos,1 if not i else 0 if i == n-1 else 2,r[i],pk,500 * ct,d2=d2 if isD else 0)
            ct = 0

def RunA(pos,res):
    gli = [0,0]
    for li in res:
        n,p,pk = li
        n1 = gli.index(0 if n else pk)
        cht(n1)
        mt1(pos,n,p,pk,mh=[0,400],a1=2500)
        gli[n1] = pk if n else 0
        
def RunB(pos,res):
    for li in res:
        r,pk = li
        for i in range(0,len(r)-1):
            s,e = r[i],r[i+1]
            cht(4 in [s,e])
            mt1(pos,1,s,pk)
            mt1(pos,0,e,pk)
            
            
def wt_init():
    for i in range(4):
        li = [[2,7,1,9,6,8,3,10,4,12,5,11],
              [17,0,16,15,13,0,0,14,18],
              [0,23,101,24,0,0,19,103,22,0,0,20,102,21,0],
              [25,0,26,34,35,0,0,29,33,28,30,0,36,27,31,0,32,0]][i]
        for ad,val in enumerate(li):
            ts((100*(1+i))+ad,val)
wt_init()       # temp

ts(30,1)        # buzz
import time         # temp
time_start = time.time()        # temp

def cvt(t,li):
    di = {10:'a',11:'b',12:'c'}
    li = [0 if i > 100 else i-[0,12,18,24][t] if i > 0 else 0 for i in li]
    li = [di[i] if i in di else str(i) for i in li]
    return ''.join(li)
root,leaf,info = [-1]*4,[-1]*4,[-1]*4
for i in range(4):
    y,x = [[2,6],[3,3],[3,5],[3,3]][i]
    li = ts([100,200,300,400][i],[],y,x)
    if i == 2:
        info[i] = [li.index(101+i) for i in range(3)]
    root[i] = cvt(i,li) if i != 3 else [cvt(i,li),cvt(i,ts(409,[],y,x))]

ress = [[[1, 10, 5], [1, 4, 6], [0, 4, 5], [1, 11, 11], [0, 10, 11], [1, 5, 8], [0, 5, 6], [1, 10, 11], [0, 10, 8], [1, 6, 3], [0, 11, 11], [1, 8, 4], [0, 6, 4], [1, 2, 1], [0, 2, 3], [1, 6, 4], [0, 8, 4], [1, 0, 2], [0, 0, 1], [1, 7, 10], [0, 6, 10], [1, 1, 7], [0, 1, 2], [1, 11, 11], [0, 7, 11], [1, 6, 10], [0, 11, 7], [1, 9, 12], [0, 6, 12], [1, 8, 4], [0, 8, 10], [1, 3, 9], [0, 3, 4], [0, 9, 9]],
[[[2, 5], 4], [[4, 1], 1], [[3, 4], 3], [[0, 3], 5], [[1, 0], 1], [[4, 1], 3], [[7, 4], 2], [[1, 2], 3], [[4, 1], 2], [[5, 4, 7, 6], 4], [[3, 4], 5], [[8, 5], 6], [[6, 3], 4]],
[[[3, 4], 6], [[13, 14], 3], [[8, 3], 4], [[11, 12, 13], 2], [[3, 8], 4], [[6, 11], 1], [[1, 6], 5], [[11, 10], 1], [[6, 11], 5], [[8, 3], 4], [[13, 8], 2], [[11, 12, 13], 5], [[10, 11, 6, 1, 0], 1], [[13, 12, 11, 10], 5], [[8, 13, 12, 11], 2], [[14, 13, 8], 3], [[11, 12, 13, 14], 2], [[10, 11, 6, 1], 5], [[8, 7, 6, 11, 10], 3], [[1, 6, 11, 12, 13, 8], 5], [[14, 13, 12, 11, 6], 2], [[8, 13], 5], [[3, 2, 1], 4], [[4, 3, 8], 6], [[1, 2, 3, 4], 4], [[13, 12, 11], 5], [[8, 13, 14], 6], [[11, 12, 13, 8], 5], [[0, 1], 1], [[10, 11], 3], [[14, 13], 6], [[4, 3], 4]],
[[0, [8, 5], 9], [1, [7, 6], 8], [-1, [], 9], [1, [1, 2], 6], [1, [0, 1], 4], [1, [3, 0], 12], [1, [4, 3], 3], [-2, [], 3], [0, [4, 5, 8], 11], [0, [3, 4, 5], 10], [1, [7, 8], 9], [-1, [], 10], [1, [1, 4, 3], 4], [0, [1, 4, 3, 6], 3], [-2, [], 4], [0, [8, 5], 11], [1, [7, 4, 3], 10], [-1, [], 11], [1, [2, 1], 6], [1, [3, 4], 10], [1, [5, 2], 7], [1, [4, 5], 10], [1, [1, 4, 3], 6], [0, [1, 4, 5, 8], 4], [-2, [], 6], [0, [2, 5], 2], [0, [0, 3, 4], 1], [0, [6, 3, 0], 3], [0, [4, 3, 6], 1], [0, [5, 4, 3], 2], [0, [7, 4], 5], [0, [8, 7], 4], [1, [6, 3, 4, 1], 8], [1, [5, 4, 3, 6], 10], [1, [0, 3, 4, 5], 12], [1, [1, 4], 8], [1, [2, 1, 0], 7], [1, [4, 1], 8], [1, [5, 4], 12], [1, [8, 5, 2], 9], [1, [4, 5], 12], [1, [7, 4], 11], [1, [6, 3], 10]]]
#ress[0] = main(0,root[0]); tl(0, 'done !!!')
#ress[1] = main(1,root[1]); tl(1, 'done !!!')
#ress[2] = main(2,root[2],info[2]); tl(2, 'done !!!')
#ress[3] = main(3,*root[3]); tl(3, 'done !!!')

grip(0)
mj([90,0,90,90,-90,0])
RunA(A,ress[0])
mjx(up(B[0][tool],0,400),sol=3)
RunB(B,ress[1])
ml([0,0,100,0,0,0],mod=1)
mj([0,0,0,0,180,0],mod=1)
Run([D1,D2],ress[3])
Run(C,ress[2])

ts(30,1)        # buzz
time_end = time.time() - time_start         # temp
minute,second = int(time_end // 60),int(time_end % 60)         # temp
tl('{}m {}s\n'.format(minute,second))         # temp